/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BDD swig_types[0]
#define SWIGTYPE_p_BDDV swig_types[1]
#define SWIGTYPE_p_BDD_Hash swig_types[2]
#define SWIGTYPE_p_BOut swig_types[3]
#define SWIGTYPE_p_BtoI swig_types[4]
#define SWIGTYPE_p_CtoI swig_types[5]
#define SWIGTYPE_p_FILE swig_types[6]
#define SWIGTYPE_p_FuncTable swig_types[7]
#define SWIGTYPE_p_VarTable swig_types[8]
#define SWIGTYPE_p_ZBDD swig_types[9]
#define SWIGTYPE_p_ZBDDV swig_types[10]
#define SWIGTYPE_p_ZBDD_Hash swig_types[11]
#define SWIGTYPE_p_char swig_types[12]
#define SWIGTYPE_p_unsigned_int swig_types[13]
#define SWIGTYPE_p_void swig_types[14]
static swig_type_info *swig_types[16];
static swig_module_info swig_module = {swig_types, 15, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_RUBDD
#define SWIG_name    "RUBDD"

static VALUE mRUBDD;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x010335 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "BDD.h"
#include "ZBDD.h"
#include "CtoI.h"
#include "BtoI.h"
#include "vsop.h"


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig1.3/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


/*@SWIG:/usr/share/swig1.3/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (VALUE obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    #if defined(StringValuePtr)
    char *cstr = StringValuePtr(obj); 
    #else
    char *cstr = STR2CSTR(obj);
    #endif
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsCharArray(VALUE obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (VALUE obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN VALUE
_wrap_BDD_MaxNode_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(BDD_MaxNode));
  return _val;
}


SWIGINTERN VALUE
_wrap_BDD_MaxVar_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_int(static_cast< int >(BDD_MaxVar));
  return _val;
}


SWIGINTERN VALUE
_wrap_BDD_Init(int argc, VALUE *argv, VALUE self) {
  bddword arg1 ;
  bddword arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bddword","BDD_Init", 1, argv[0] ));
  } 
  arg1 = static_cast< bddword >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bddword","BDD_Init", 2, argv[1] ));
  } 
  arg2 = static_cast< bddword >(val2);
  BDD_Init(arg1,arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_NewVar(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)BDD_NewVar();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_NewVarOfLev(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDD_NewVarOfLev", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (int)BDD_NewVarOfLev(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_LevOfVar(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDD_LevOfVar", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (int)BDD_LevOfVar(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_VarOfLev(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDD_VarOfLev", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (int)BDD_VarOfLev(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_VarUsed(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)BDD_VarUsed();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_TopLev(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)BDD_TopLev();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Used(int argc, VALUE *argv, VALUE self) {
  bddword result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (bddword)BDD_Used();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_GC(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  BDD_GC();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_CacheInt(int argc, VALUE *argv, VALUE self) {
  unsigned char arg1 ;
  bddword arg2 ;
  bddword arg3 ;
  bddword result;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned char","BDD_CacheInt", 1, argv[0] ));
  } 
  arg1 = static_cast< unsigned char >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bddword","BDD_CacheInt", 2, argv[1] ));
  } 
  arg2 = static_cast< bddword >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bddword","BDD_CacheInt", 3, argv[2] ));
  } 
  arg3 = static_cast< bddword >(val3);
  result = (bddword)BDD_CacheInt(arg1,arg2,arg3);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_CacheBDD(int argc, VALUE *argv, VALUE self) {
  unsigned char arg1 ;
  bddword arg2 ;
  bddword arg3 ;
  BDD result;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned char","BDD_CacheBDD", 1, argv[0] ));
  } 
  arg1 = static_cast< unsigned char >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bddword","BDD_CacheBDD", 2, argv[1] ));
  } 
  arg2 = static_cast< bddword >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bddword","BDD_CacheBDD", 3, argv[2] ));
  } 
  arg3 = static_cast< bddword >(val3);
  result = BDD_CacheBDD(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_CacheEnt(int argc, VALUE *argv, VALUE self) {
  unsigned char arg1 ;
  bddword arg2 ;
  bddword arg3 ;
  bddword arg4 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "unsigned char","BDD_CacheEnt", 1, argv[0] ));
  } 
  arg1 = static_cast< unsigned char >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bddword","BDD_CacheEnt", 2, argv[1] ));
  } 
  arg2 = static_cast< bddword >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bddword","BDD_CacheEnt", 3, argv[2] ));
  } 
  arg3 = static_cast< bddword >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bddword","BDD_CacheEnt", 4, argv[3] ));
  } 
  arg4 = static_cast< bddword >(val4);
  BDD_CacheEnt(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_ID(int argc, VALUE *argv, VALUE self) {
  bddword arg1 ;
  BDD result;
  unsigned int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bddword","BDD_ID", 1, argv[0] ));
  } 
  arg1 = static_cast< bddword >(val1);
  result = BDD_ID(arg1);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDvar(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  BDD result;
  int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDDvar", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = BDDvar(arg1);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.bdd_and

  call-seq:
    bdd_and(?, ?) -> BDD

AND operator.
*/
SWIGINTERN VALUE
_wrap_bdd_and(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = 0 ;
  BDD *arg2 = 0 ;
  BDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD const &","operator &", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","operator &", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD const &","operator &", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","operator &", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BDD * >(argp2);
  result = operator &((BDD const &)*arg1,(BDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.bdd_or

  call-seq:
    bdd_or(?, ?) -> BDD

OR operator.
*/
SWIGINTERN VALUE
_wrap_bdd_or(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = 0 ;
  BDD *arg2 = 0 ;
  BDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD const &","operator |", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","operator |", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD const &","operator |", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","operator |", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BDD * >(argp2);
  result = operator |((BDD const &)*arg1,(BDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.bdd_hat

  call-seq:
    bdd_hat(?, ?) -> BDD

XOR operator.
*/
SWIGINTERN VALUE
_wrap_bdd_hat(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = 0 ;
  BDD *arg2 = 0 ;
  BDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD const &","operator ^", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","operator ^", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD const &","operator ^", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","operator ^", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BDD * >(argp2);
  result = operator ^((BDD const &)*arg1,(BDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.bdd_eq

  call-seq:
    bdd_eq(?, ?) -> int

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_bdd_eq(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = 0 ;
  BDD *arg2 = 0 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD const &","operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD const &","operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BDD * >(argp2);
  result = (int)operator ==((BDD const &)*arg1,(BDD const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Imply(int argc, VALUE *argv, VALUE self) {
  BDD arg1 ;
  BDD arg2 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD","BDD_Imply", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","BDD_Imply", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BDD * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD","BDD_Imply", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","BDD_Imply", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BDD * >(argp2));
    }
  }
  result = (int)BDD_Imply(arg1,arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Import__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FILE *arg1 = (FILE *) 0 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FILE *","BDD_Import", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  result = BDD_Import(arg1);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Import__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BDD result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = BDD_Import();
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BDD_Import(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_BDD_Import__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FILE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BDD_Import__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "BDD_Import", 
    "    BDD BDD_Import(FILE *strm)\n"
    "    BDD BDD_Import()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Random__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  BDD result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDD_Random", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","BDD_Random", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = BDD_Random(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Random__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  BDD result;
  int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDD_Random", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = BDD_Random(arg1);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BDD_Random(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_BDD_Random__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BDD_Random__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BDD_Random", 
    "    BDD BDD_Random(int, int density)\n"
    "    BDD BDD_Random(int)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDerr__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","BDDerr", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  BDDerr(arg1);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDerr__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  bddword arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","BDDerr", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bddword","BDDerr", 2, argv[1] ));
  } 
  arg2 = static_cast< bddword >(val2);
  BDDerr(arg1,arg2);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDerr__SWIG_2(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","BDDerr", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","BDDerr", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  BDDerr(arg1,arg2);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_BDDerr(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BDDerr__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BDDerr__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BDDerr__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BDDerr", 
    "    void BDDerr(char *)\n"
    "    void BDDerr(char *, bddword)\n"
    "    void BDDerr(char *, char *)\n");
  
  return Qnil;
}


swig_class cBDD;

SWIGINTERN VALUE
_wrap_new_BDD__SWIG_0(int argc, VALUE *argv, VALUE self) {
  BDD *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (BDD *)new BDD();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BDD__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  BDD *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDD", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (BDD *)new BDD(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BDD_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BDD_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_BDD);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BDD__SWIG_2(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = 0 ;
  BDD *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD const &","BDD", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","BDD", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  result = (BDD *)new BDD((BDD const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BDD(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BDD__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BDD__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BDD__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "BDD.new", 
    "    BDD.new()\n"
    "    BDD.new(int)\n"
    "    BDD.new(BDD const &)\n");
  
  return Qnil;
}


SWIGINTERN void
free_BDD(BDD *arg1) {
    delete arg1;
}


/*
  Document-method: RUBDD::BDD.~

  call-seq:
    ~ -> BDD

Invert operator.
*/
SWIGINTERN VALUE
_wrap_BDD___invert__(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","operator ~", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  result = (arg1)->operator ~();
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BDD.<<

  call-seq:
    <<(?) -> BDD

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_BDD___lshift__(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  int arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator <<", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->operator <<(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BDD.>>

  call-seq:
    >>(?) -> BDD

Right shifting operator or extracting operator.
*/
SWIGINTERN VALUE
_wrap_BDD___rshift__(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  int arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","operator >>", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator >>", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->operator >>(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_At0(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  int arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","At0", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","At0", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->At0(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_At1(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  int arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","At1", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","At1", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->At1(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Cofact(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  BDD arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Cofact", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD","Cofact", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","Cofact", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BDD * >(argp2));
    }
  }
  result = (arg1)->Cofact(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Univ(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  BDD arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Univ", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD","Univ", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","Univ", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BDD * >(argp2));
    }
  }
  result = (arg1)->Univ(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Exist(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  BDD arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Exist", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD","Exist", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","Exist", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BDD * >(argp2));
    }
  }
  result = (arg1)->Exist(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Support(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Support", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  result = (arg1)->Support();
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Top(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Top", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  result = (int)(arg1)->Top();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Size(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Size", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  result = (bddword)(arg1)->Size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Export__SWIG_0(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "FILE *","Export", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< FILE * >(argp2);
  (arg1)->Export(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Export__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  (arg1)->Export();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BDD_Export(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BDD_Export__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FILE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BDD_Export__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "BDD.Export", 
    "    void BDD.Export(FILE *strm)\n"
    "    void BDD.Export()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_XPrint0(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","XPrint0", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  (arg1)->XPrint0();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_XPrint(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","XPrint", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  (arg1)->XPrint();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_GetID(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","GetID", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  result = (bddword)(arg1)->GetID();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Print(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  (arg1)->Print();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Swap(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  int arg2 ;
  int arg3 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Swap", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Swap", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Swap", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->Swap(arg2,arg3);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Smooth(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = (BDD *) 0 ;
  int arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD *","Smooth", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Smooth", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->Smooth(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_SysVarTop_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_int(static_cast< int >(BDDV_SysVarTop));
  return _val;
}


SWIGINTERN VALUE
_wrap_BDDV_MaxLen_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_int(static_cast< int >(BDDV_MaxLen));
  return _val;
}


SWIGINTERN VALUE
_wrap_BDDV_MaxLenImport_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_int(static_cast< int >(BDDV_MaxLenImport));
  return _val;
}


SWIGINTERN VALUE
_wrap_BDDV_Init(int argc, VALUE *argv, VALUE self) {
  bddword arg1 ;
  bddword arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bddword","BDDV_Init", 1, argv[0] ));
  } 
  arg1 = static_cast< bddword >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bddword","BDDV_Init", 2, argv[1] ));
  } 
  arg2 = static_cast< bddword >(val2);
  BDDV_Init(arg1,arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_UserTopLev(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)BDDV_UserTopLev();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_NewVar(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)BDDV_NewVar();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_NewVarOfLev(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDDV_NewVarOfLev", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (int)BDDV_NewVarOfLev(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.bddv_and

  call-seq:
    bddv_and(?, ?) -> BDDV

AND operator.
*/
SWIGINTERN VALUE
_wrap_bddv_and(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = 0 ;
  BDDV *arg2 = 0 ;
  BDDV result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV const &","operator &", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","operator &", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDDV const &","operator &", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","operator &", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BDDV * >(argp2);
  result = operator &((BDDV const &)*arg1,(BDDV const &)*arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.bddv_or

  call-seq:
    bddv_or(?, ?) -> BDDV

OR operator.
*/
SWIGINTERN VALUE
_wrap_bddv_or(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = 0 ;
  BDDV *arg2 = 0 ;
  BDDV result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV const &","operator |", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","operator |", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDDV const &","operator |", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","operator |", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BDDV * >(argp2);
  result = operator |((BDDV const &)*arg1,(BDDV const &)*arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.bddv_hat

  call-seq:
    bddv_hat(?, ?) -> BDDV

XOR operator.
*/
SWIGINTERN VALUE
_wrap_bddv_hat(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = 0 ;
  BDDV *arg2 = 0 ;
  BDDV result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV const &","operator ^", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","operator ^", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDDV const &","operator ^", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","operator ^", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BDDV * >(argp2);
  result = operator ^((BDDV const &)*arg1,(BDDV const &)*arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.bddv_eq

  call-seq:
    bddv_eq(?, ?) -> int

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_bddv_eq(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = 0 ;
  BDDV *arg2 = 0 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV const &","operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDDV const &","operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BDDV * >(argp2);
  result = (int)operator ==((BDDV const &)*arg1,(BDDV const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Imply(int argc, VALUE *argv, VALUE self) {
  BDDV arg1 ;
  BDDV arg2 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDDV,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV","BDDV_Imply", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV","BDDV_Imply", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BDDV * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BDDV,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDDV","BDDV_Imply", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV","BDDV_Imply", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BDDV * >(argp2));
    }
  }
  result = (int)BDDV_Imply(arg1,arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Mask1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  BDDV result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDDV_Mask1", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","BDDV_Mask1", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = BDDV_Mask1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Mask2(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  BDDV result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BDDV_Mask2", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","BDDV_Mask2", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = BDDV_Mask2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Import__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FILE *arg1 = (FILE *) 0 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FILE *","BDDV_Import", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  result = BDDV_Import(arg1);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Import__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BDDV result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = BDDV_Import();
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BDDV_Import(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_BDDV_Import__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FILE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BDDV_Import__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "BDDV_Import", 
    "    BDDV BDDV_Import(FILE *strm)\n"
    "    BDDV BDDV_Import()\n");
  
  return Qnil;
}


swig_class cBDDV;

SWIGINTERN VALUE
_wrap_new_BDDV__SWIG_0(int argc, VALUE *argv, VALUE self) {
  BDDV *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (BDDV *)new BDDV();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BDDV__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = 0 ;
  BDDV *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV const &","BDDV", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","BDDV", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (BDDV *)new BDDV((BDDV const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BDDV__SWIG_2(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = 0 ;
  int arg2 ;
  BDDV *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD const &","BDDV", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","BDDV", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","BDDV", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (BDDV *)new BDDV((BDD const &)*arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BDDV_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BDDV_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_BDDV);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BDDV__SWIG_3(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = 0 ;
  BDDV *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD const &","BDDV", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","BDDV", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  result = (BDDV *)new BDDV((BDD const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BDDV(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BDDV__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BDDV__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BDDV__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BDDV__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "BDDV.new", 
    "    BDDV.new()\n"
    "    BDDV.new(BDDV const &)\n"
    "    BDDV.new(BDD const &, int len)\n"
    "    BDDV.new(BDD const &)\n");
  
  return Qnil;
}


SWIGINTERN void
free_BDDV(BDDV *arg1) {
    delete arg1;
}


/*
  Document-method: RUBDD::BDDV.~

  call-seq:
    ~ -> BDDV

Invert operator.
*/
SWIGINTERN VALUE
_wrap_BDDV___invert__(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","operator ~", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (arg1)->operator ~();
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BDDV.<<

  call-seq:
    <<(?) -> BDDV

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_BDDV___lshift__(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int arg2 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator <<", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->operator <<(arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BDDV.>>

  call-seq:
    >>(?) -> BDDV

Right shifting operator or extracting operator.
*/
SWIGINTERN VALUE
_wrap_BDDV___rshift__(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int arg2 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","operator >>", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator >>", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->operator >>(arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_At0(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int arg2 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","At0", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","At0", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->At0(arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_At1(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int arg2 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","At1", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","At1", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->At1(arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Cofact(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  BDDV arg2 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Cofact", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BDDV,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDDV","Cofact", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV","Cofact", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BDDV * >(argp2));
    }
  }
  result = (arg1)->Cofact(arg2);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Swap(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int arg2 ;
  int arg3 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Swap", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Swap", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Swap", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->Swap(arg2,arg3);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Top(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Top", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (int)(arg1)->Top();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Size(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Size", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (bddword)(arg1)->Size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Export__SWIG_0(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "FILE *","Export", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< FILE * >(argp2);
  (arg1)->Export(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Export__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  (arg1)->Export();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BDDV_Export(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BDDV_Export__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FILE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BDDV_Export__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "BDDV.Export", 
    "    void BDDV.Export(FILE *strm)\n"
    "    void BDDV.Export()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_XPrint0(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","XPrint0", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  (arg1)->XPrint0();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_XPrint(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","XPrint", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  (arg1)->XPrint();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Former(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Former", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (arg1)->Former();
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Latter(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Latter", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (arg1)->Latter();
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Part(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int arg2 ;
  int arg3 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Part", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Part", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Part", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->Part(arg2,arg3);
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_GetBDD(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","GetBDD", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetBDD", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->GetBDD(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_GetMetaBDD(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","GetMetaBDD", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (arg1)->GetMetaBDD();
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Uniform(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Uniform", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (int)(arg1)->Uniform();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Len(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Len", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (int)(arg1)->Len();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDDV_Print(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = (BDDV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  (arg1)->Print();
  return Qnil;
fail:
  return Qnil;
}


swig_class cBDD_Hash;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BDD_Hash_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BDD_Hash_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_BDD_Hash);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BDD_Hash(int argc, VALUE *argv, VALUE self) {
  BDD_Hash *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (BDD_Hash *)new BDD_Hash();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_BDD_Hash(BDD_Hash *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_BDD_Hash_Clear(int argc, VALUE *argv, VALUE self) {
  BDD_Hash *arg1 = (BDD_Hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD_Hash *","Clear", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD_Hash * >(argp1);
  (arg1)->Clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Hash_Enter(int argc, VALUE *argv, VALUE self) {
  BDD_Hash *arg1 = (BDD_Hash *) 0 ;
  BDD arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD_Hash *","Enter", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD_Hash * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD","Enter", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","Enter", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BDD * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "void *","Enter", 3, argv[1] )); 
  }
  (arg1)->Enter(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Hash_Refer(int argc, VALUE *argv, VALUE self) {
  BDD_Hash *arg1 = (BDD_Hash *) 0 ;
  BDD arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD_Hash *","Refer", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD_Hash * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD","Refer", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","Refer", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BDD * >(argp2));
    }
  }
  result = (void *)(arg1)->Refer(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_Hash_Amount(int argc, VALUE *argv, VALUE self) {
  BDD_Hash *arg1 = (BDD_Hash *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BDD_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD_Hash *","Amount", 1, self )); 
  }
  arg1 = reinterpret_cast< BDD_Hash * >(argp1);
  result = (bddword)(arg1)->Amount();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.zbdd_and

  call-seq:
    zbdd_and(?, ?) -> ZBDD

AND operator.
*/
SWIGINTERN VALUE
_wrap_zbdd_and(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDD *arg2 = 0 ;
  ZBDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","operator &", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator &", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD const &","operator &", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator &", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDD * >(argp2);
  result = operator &((ZBDD const &)*arg1,(ZBDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.zbdd_add

  call-seq:
    zbdd_add(?, ?) -> ZBDD

Add operator.
*/
SWIGINTERN VALUE
_wrap_zbdd_add(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDD *arg2 = 0 ;
  ZBDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","operator +", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator +", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD const &","operator +", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator +", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDD * >(argp2);
  result = operator +((ZBDD const &)*arg1,(ZBDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.zbdd_sub

  call-seq:
    zbdd_sub(?, ?) -> ZBDD

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_zbdd_sub(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDD *arg2 = 0 ;
  ZBDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","operator -", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator -", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD const &","operator -", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator -", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDD * >(argp2);
  result = operator -((ZBDD const &)*arg1,(ZBDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_zbdd_mul(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDD *arg2 = 0 ;
  ZBDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","operator *", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator *", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD const &","operator *", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator *", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDD * >(argp2);
  result = operator *((ZBDD const &)*arg1,(ZBDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_zbdd_div(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDD *arg2 = 0 ;
  ZBDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","operator /", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator /", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD const &","operator /", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator /", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDD * >(argp2);
  result = operator /((ZBDD const &)*arg1,(ZBDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_zbdd_mod(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDD *arg2 = 0 ;
  ZBDD result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","operator %", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator %", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD const &","operator %", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator %", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDD * >(argp2);
  result = operator %((ZBDD const &)*arg1,(ZBDD const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.zbdd_eq

  call-seq:
    zbdd_eq(?, ?) -> int

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_zbdd_eq(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDD *arg2 = 0 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD const &","operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDD * >(argp2);
  result = (int)operator ==((ZBDD const &)*arg1,(ZBDD const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Random__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  ZBDD result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","ZBDD_Random", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ZBDD_Random", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ZBDD_Random(arg1,arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Random__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  ZBDD result;
  int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","ZBDD_Random", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = ZBDD_Random(arg1);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ZBDD_Random(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ZBDD_Random__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ZBDD_Random__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ZBDD_Random", 
    "    ZBDD ZBDD_Random(int, int density)\n"
    "    ZBDD ZBDD_Random(int)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Import__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FILE *arg1 = (FILE *) 0 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FILE *","ZBDD_Import", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  result = ZBDD_Import(arg1);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Import__SWIG_1(int argc, VALUE *argv, VALUE self) {
  ZBDD result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = ZBDD_Import();
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ZBDD_Import(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_ZBDD_Import__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FILE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ZBDD_Import__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ZBDD_Import", 
    "    ZBDD ZBDD_Import(FILE *strm)\n"
    "    ZBDD ZBDD_Import()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BDD_CacheZBDD(int argc, VALUE *argv, VALUE self) {
  char arg1 ;
  bddword arg2 ;
  bddword arg3 ;
  ZBDD result;
  char val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "char","BDD_CacheZBDD", 1, argv[0] ));
  } 
  arg1 = static_cast< char >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bddword","BDD_CacheZBDD", 2, argv[1] ));
  } 
  arg2 = static_cast< bddword >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bddword","BDD_CacheZBDD", 3, argv[2] ));
  } 
  arg3 = static_cast< bddword >(val3);
  result = BDD_CacheZBDD(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_ID(int argc, VALUE *argv, VALUE self) {
  bddword arg1 ;
  ZBDD result;
  unsigned int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bddword","ZBDD_ID", 1, argv[0] ));
  } 
  arg1 = static_cast< bddword >(val1);
  result = ZBDD_ID(arg1);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_LCM_A(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ZBDD result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","ZBDD_LCM_A", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ZBDD_LCM_A", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ZBDD_LCM_A(arg1,arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_LCM_C(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ZBDD result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","ZBDD_LCM_C", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ZBDD_LCM_C", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ZBDD_LCM_C(arg1,arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_LCM_M(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ZBDD result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","ZBDD_LCM_M", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ZBDD_LCM_M", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ZBDD_LCM_M(arg1,arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


swig_class cZBDD;

SWIGINTERN VALUE
_wrap_new_ZBDD__SWIG_0(int argc, VALUE *argv, VALUE self) {
  ZBDD *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (ZBDD *)new ZBDD();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ZBDD__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  ZBDD *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","ZBDD", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (ZBDD *)new ZBDD(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ZBDD_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ZBDD_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_ZBDD);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ZBDD__SWIG_2(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDD *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","ZBDD", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","ZBDD", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (ZBDD *)new ZBDD((ZBDD const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ZBDD(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ZBDD__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ZBDD__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ZBDD__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ZBDD.new", 
    "    ZBDD.new()\n"
    "    ZBDD.new(int)\n"
    "    ZBDD.new(ZBDD const &)\n");
  
  return Qnil;
}


SWIGINTERN void
free_ZBDD(ZBDD *arg1) {
    delete arg1;
}


/*
  Document-method: RUBDD::ZBDD.<<

  call-seq:
    <<(?) -> ZBDD

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_ZBDD___lshift__(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator <<", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->operator <<(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::ZBDD.>>

  call-seq:
    >>(?) -> ZBDD

Right shifting operator or extracting operator.
*/
SWIGINTERN VALUE
_wrap_ZBDD___rshift__(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","operator >>", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator >>", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->operator >>(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_OffSet(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","OffSet", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","OffSet", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->OffSet(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_OnSet(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","OnSet", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","OnSet", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->OnSet(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_OnSet0(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","OnSet0", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","OnSet0", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->OnSet0(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Change(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Change", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Change", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->Change(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Swap(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  int arg3 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Swap", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Swap", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Swap", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->Swap(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Restrict(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  ZBDD arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Restrict", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ZBDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD","Restrict", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD","Restrict", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ZBDD * >(argp2));
    }
  }
  result = (arg1)->Restrict(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Permit(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  ZBDD arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Permit", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ZBDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD","Permit", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD","Permit", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ZBDD * >(argp2));
    }
  }
  result = (arg1)->Permit(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_PermitSym(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","PermitSym", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","PermitSym", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->PermitSym(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Support(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Support", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (arg1)->Support();
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Always(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Always", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (arg1)->Always();
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_SymChk(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","SymChk", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SymChk", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SymChk", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->SymChk(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_SymGrp(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","SymGrp", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (arg1)->SymGrp();
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_SymGrpNaive(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","SymGrpNaive", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (arg1)->SymGrpNaive();
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_ImplyChk(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","ImplyChk", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ImplyChk", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","ImplyChk", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->ImplyChk(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_CoImplyChk(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","CoImplyChk", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CoImplyChk", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CoImplyChk", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->CoImplyChk(arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_SymSet(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","SymSet", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SymSet", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->SymSet(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_ImplySet(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","ImplySet", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ImplySet", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->ImplySet(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_CoImplySet(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","CoImplySet", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","CoImplySet", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->CoImplySet(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_IsPoly(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","IsPoly", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (int)(arg1)->IsPoly();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Divisor(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Divisor", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (arg1)->Divisor();
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Top(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Top", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (int)(arg1)->Top();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_GetID(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","GetID", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (bddword)(arg1)->GetID();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Size(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Size", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (bddword)(arg1)->Size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Card(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Card", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (bddword)(arg1)->Card();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Lit(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Lit", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (bddword)(arg1)->Lit();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Export__SWIG_0(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "FILE *","Export", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< FILE * >(argp2);
  (arg1)->Export(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Export__SWIG_1(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  (arg1)->Export();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ZBDD_Export(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ZBDD_Export__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FILE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ZBDD_Export__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ZBDD.Export", 
    "    void ZBDD.Export(FILE *strm)\n"
    "    void ZBDD.Export()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_PrintPla(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","PrintPla", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  (arg1)->PrintPla();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_XPrint(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","XPrint", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  (arg1)->XPrint();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Print(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = (ZBDD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  (arg1)->Print();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.zbddv_and

  call-seq:
    zbddv_and(?, ?) -> ZBDDV

AND operator.
*/
SWIGINTERN VALUE
_wrap_zbddv_and(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = 0 ;
  ZBDDV *arg2 = 0 ;
  ZBDDV result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV const &","operator &", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","operator &", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDDV const &","operator &", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","operator &", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDDV * >(argp2);
  result = operator &((ZBDDV const &)*arg1,(ZBDDV const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.zbddv_add

  call-seq:
    zbddv_add(?, ?) -> ZBDDV

Add operator.
*/
SWIGINTERN VALUE
_wrap_zbddv_add(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = 0 ;
  ZBDDV *arg2 = 0 ;
  ZBDDV result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV const &","operator +", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","operator +", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDDV const &","operator +", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","operator +", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDDV * >(argp2);
  result = operator +((ZBDDV const &)*arg1,(ZBDDV const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.zbddv_sub

  call-seq:
    zbddv_sub(?, ?) -> ZBDDV

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_zbddv_sub(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = 0 ;
  ZBDDV *arg2 = 0 ;
  ZBDDV result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV const &","operator -", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","operator -", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDDV const &","operator -", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","operator -", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDDV * >(argp2);
  result = operator -((ZBDDV const &)*arg1,(ZBDDV const &)*arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.zbddv_eq

  call-seq:
    zbddv_eq(?, ?) -> int

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_zbddv_eq(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = 0 ;
  ZBDDV *arg2 = 0 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV const &","operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDDV const &","operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< ZBDDV * >(argp2);
  result = (int)operator ==((ZBDDV const &)*arg1,(ZBDDV const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Import__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FILE *arg1 = (FILE *) 0 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FILE *","ZBDDV_Import", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  result = ZBDDV_Import(arg1);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Import__SWIG_1(int argc, VALUE *argv, VALUE self) {
  ZBDDV result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = ZBDDV_Import();
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ZBDDV_Import(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_ZBDDV_Import__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FILE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ZBDDV_Import__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ZBDDV_Import", 
    "    ZBDDV ZBDDV_Import(FILE *strm)\n"
    "    ZBDDV ZBDDV_Import()\n");
  
  return Qnil;
}


swig_class cZBDDV;

SWIGINTERN VALUE
_wrap_new_ZBDDV__SWIG_0(int argc, VALUE *argv, VALUE self) {
  ZBDDV *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (ZBDDV *)new ZBDDV();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ZBDDV__SWIG_1(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = 0 ;
  ZBDDV *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV const &","ZBDDV", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDDV const &","ZBDDV", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  result = (ZBDDV *)new ZBDDV((ZBDDV const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ZBDDV__SWIG_2(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  int arg2 ;
  ZBDDV *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","ZBDDV", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","ZBDDV", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ZBDDV", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (ZBDDV *)new ZBDDV((ZBDD const &)*arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ZBDDV_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ZBDDV_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_ZBDDV);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ZBDDV__SWIG_3(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  ZBDDV *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","ZBDDV", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","ZBDDV", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (ZBDDV *)new ZBDDV((ZBDD const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ZBDDV(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ZBDDV__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ZBDDV__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ZBDDV__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ZBDDV__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ZBDDV.new", 
    "    ZBDDV.new()\n"
    "    ZBDDV.new(ZBDDV const &)\n"
    "    ZBDDV.new(ZBDD const &, int location)\n"
    "    ZBDDV.new(ZBDD const &)\n");
  
  return Qnil;
}


SWIGINTERN void
free_ZBDDV(ZBDDV *arg1) {
    delete arg1;
}


/*
  Document-method: RUBDD::ZBDDV.<<

  call-seq:
    <<(?) -> ZBDDV

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_ZBDDV___lshift__(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator <<", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->operator <<(arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::ZBDDV.>>

  call-seq:
    >>(?) -> ZBDDV

Right shifting operator or extracting operator.
*/
SWIGINTERN VALUE
_wrap_ZBDDV___rshift__(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","operator >>", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator >>", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->operator >>(arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_OffSet(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","OffSet", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","OffSet", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->OffSet(arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_OnSet(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","OnSet", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","OnSet", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->OnSet(arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_OnSet0(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","OnSet0", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","OnSet0", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->OnSet0(arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Change(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Change", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Change", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->Change(arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Swap(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  int arg3 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Swap", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Swap", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Swap", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->Swap(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Top(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Top", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  result = (int)(arg1)->Top();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Mask__SWIG_0(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  int arg3 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Mask", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Mask", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Mask", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->Mask(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Mask__SWIG_1(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  ZBDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Mask", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Mask", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->Mask(arg2);
  vresult = SWIG_NewPointerObj((new ZBDDV(static_cast< const ZBDDV& >(result))), SWIGTYPE_p_ZBDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ZBDDV_Mask(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ZBDDV_Mask__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ZBDDV_Mask__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ZBDDV.Mask", 
    "    ZBDDV ZBDDV.Mask(int start, int length)\n"
    "    ZBDDV ZBDDV.Mask(int start)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_GetZBDD(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int arg2 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","GetZBDD", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetZBDD", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->GetZBDD(arg2);
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_GetMetaZBDD(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","GetMetaZBDD", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  result = (arg1)->GetMetaZBDD();
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Last(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Last", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  result = (int)(arg1)->Last();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Size(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Size", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  result = (bddword)(arg1)->Size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Print(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  (arg1)->Print();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Export__SWIG_0(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "FILE *","Export", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< FILE * >(argp2);
  (arg1)->Export(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_Export__SWIG_1(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","Export", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  (arg1)->Export();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ZBDDV_Export(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ZBDDV_Export__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FILE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ZBDDV_Export__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ZBDDV.Export", 
    "    void ZBDDV.Export(FILE *strm)\n"
    "    void ZBDDV.Export()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_PrintPla(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","PrintPla", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  result = (int)(arg1)->PrintPla();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDDV_XPrint(int argc, VALUE *argv, VALUE self) {
  ZBDDV *arg1 = (ZBDDV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDDV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDDV *","XPrint", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDDV * >(argp1);
  (arg1)->XPrint();
  return Qnil;
fail:
  return Qnil;
}


swig_class cZBDD_Hash;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ZBDD_Hash_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ZBDD_Hash_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_ZBDD_Hash);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ZBDD_Hash(int argc, VALUE *argv, VALUE self) {
  ZBDD_Hash *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (ZBDD_Hash *)new ZBDD_Hash();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_ZBDD_Hash(ZBDD_Hash *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ZBDD_Hash_Clear(int argc, VALUE *argv, VALUE self) {
  ZBDD_Hash *arg1 = (ZBDD_Hash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD_Hash *","Clear", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD_Hash * >(argp1);
  (arg1)->Clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Hash_Enter(int argc, VALUE *argv, VALUE self) {
  ZBDD_Hash *arg1 = (ZBDD_Hash *) 0 ;
  ZBDD arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD_Hash *","Enter", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD_Hash * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ZBDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD","Enter", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD","Enter", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ZBDD * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "void *","Enter", 3, argv[1] )); 
  }
  (arg1)->Enter(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Hash_Refer(int argc, VALUE *argv, VALUE self) {
  ZBDD_Hash *arg1 = (ZBDD_Hash *) 0 ;
  ZBDD arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD_Hash *","Refer", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD_Hash * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ZBDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ZBDD","Refer", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD","Refer", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ZBDD * >(argp2));
    }
  }
  result = (void *)(arg1)->Refer(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ZBDD_Hash_Amount(int argc, VALUE *argv, VALUE self) {
  ZBDD_Hash *arg1 = (ZBDD_Hash *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ZBDD_Hash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD_Hash *","Amount", 1, self )); 
  }
  arg1 = reinterpret_cast< ZBDD_Hash * >(argp1);
  result = (bddword)(arg1)->Amount();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.ctoi_eq

  call-seq:
    ctoi_eq(?, ?) -> int

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ctoi_eq(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = 0 ;
  CtoI *arg2 = 0 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI const &","operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI const &","operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< CtoI * >(argp2);
  result = (int)operator ==((CtoI const &)*arg1,(CtoI const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.ctoi_add

  call-seq:
    ctoi_add(?, ?) -> CtoI

Add operator.
*/
SWIGINTERN VALUE
_wrap_ctoi_add(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = 0 ;
  CtoI *arg2 = 0 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI const &","operator +", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator +", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI const &","operator +", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator +", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< CtoI * >(argp2);
  result = operator +((CtoI const &)*arg1,(CtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD.ctoi_sub

  call-seq:
    ctoi_sub(?, ?) -> CtoI

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ctoi_sub(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = 0 ;
  CtoI *arg2 = 0 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI const &","operator -", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator -", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI const &","operator -", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator -", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< CtoI * >(argp2);
  result = operator -((CtoI const &)*arg1,(CtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ctoi_mul(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = 0 ;
  CtoI *arg2 = 0 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI const &","operator *", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator *", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI const &","operator *", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator *", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< CtoI * >(argp2);
  result = operator *((CtoI const &)*arg1,(CtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ctoi_div(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = 0 ;
  CtoI *arg2 = 0 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI const &","operator /", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator /", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI const &","operator /", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator /", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< CtoI * >(argp2);
  result = operator /((CtoI const &)*arg1,(CtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ctoi_mod(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = 0 ;
  CtoI *arg2 = 0 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI const &","operator %", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator %", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI const &","operator %", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","operator %", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< CtoI * >(argp2);
  result = operator %((CtoI const &)*arg1,(CtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Null(int argc, VALUE *argv, VALUE self) {
  CtoI result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = CtoI_Null();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_ITE(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI arg3 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_ITE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_ITE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_ITE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_ITE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CtoI","CtoI_ITE", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_ITE", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< CtoI * >(argp3));
    }
  }
  result = CtoI_ITE(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_EQ(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_EQ", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_EQ", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_EQ", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_EQ", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_EQ(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_NE(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_NE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_NE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_NE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_NE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_NE(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_GT(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_GT", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_GT", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_GT", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_GT", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_GT(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_GE(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_GE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_GE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_GE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_GE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_GE(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_LT(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_LT", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_LT", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_LT", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_LT", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_LT(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_LE(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_LE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_LE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_LE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_LE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_LE(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Max(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_Max", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Max", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_Max", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Max", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_Max(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Min(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_Min", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Min", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_Min", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Min", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_Min(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_atoi(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  CtoI result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","CtoI_atoi", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = CtoI_atoi(arg1);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Intsec(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_Intsec", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Intsec", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_Intsec", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Intsec", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_Intsec(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Union(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_Union", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Union", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_Union", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Union", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_Union(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Diff(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","CtoI_Diff", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Diff", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","CtoI_Diff", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","CtoI_Diff", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = CtoI_Diff(arg1,arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class cCtoI;

SWIGINTERN VALUE
_wrap_new_CtoI__SWIG_0(int argc, VALUE *argv, VALUE self) {
  CtoI *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (CtoI *)new CtoI();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CtoI__SWIG_1(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = 0 ;
  CtoI *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI const &","CtoI", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI const &","CtoI", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (CtoI *)new CtoI((CtoI const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_CtoI__SWIG_2(int argc, VALUE *argv, VALUE self) {
  ZBDD *arg1 = 0 ;
  CtoI *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_ZBDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "ZBDD const &","CtoI", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ZBDD const &","CtoI", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ZBDD * >(argp1);
  result = (CtoI *)new CtoI((ZBDD const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CtoI_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CtoI_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CtoI);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CtoI__SWIG_3(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  CtoI *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","CtoI", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (CtoI *)new CtoI(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_CtoI(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_CtoI__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CtoI, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CtoI__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ZBDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CtoI__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CtoI__SWIG_3(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CtoI.new", 
    "    CtoI.new()\n"
    "    CtoI.new(CtoI const &)\n"
    "    CtoI.new(ZBDD const &)\n"
    "    CtoI.new(int)\n");
  
  return Qnil;
}


SWIGINTERN void
free_CtoI(CtoI *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CtoI_Top(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Top", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (int)(arg1)->Top();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_TopItem(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","TopItem", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (int)(arg1)->TopItem();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_TopDigit(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","TopDigit", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (int)(arg1)->TopDigit();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_IsBool(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","IsBool", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (int)(arg1)->IsBool();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_IsConst(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","IsConst", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (int)(arg1)->IsConst();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_AffixVar(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","AffixVar", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AffixVar", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->AffixVar(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Factor0(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Factor0", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Factor0", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->Factor0(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Factor1(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Factor1", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Factor1", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->Factor1(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FilterThen(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FilterThen", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","FilterThen", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","FilterThen", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->FilterThen(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FilterElse(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FilterElse", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","FilterElse", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","FilterElse", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->FilterElse(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FilterRestrict(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FilterRestrict", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","FilterRestrict", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","FilterRestrict", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->FilterRestrict(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FilterPermit(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FilterPermit", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","FilterPermit", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","FilterPermit", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->FilterPermit(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FilterPermitSym(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FilterPermitSym", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","FilterPermitSym", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->FilterPermitSym(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Support(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Support", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->Support();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_NonZero(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","NonZero", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->NonZero();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Digit(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Digit", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Digit", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->Digit(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_EQ_Const(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","EQ_Const", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","EQ_Const", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","EQ_Const", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->EQ_Const(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_NE_Const(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","NE_Const", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","NE_Const", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","NE_Const", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->NE_Const(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_GT_Const(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","GT_Const", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","GT_Const", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","GT_Const", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->GT_Const(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_GE_Const(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","GE_Const", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","GE_Const", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","GE_Const", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->GE_Const(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_LT_Const(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","LT_Const", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","LT_Const", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","LT_Const", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->LT_Const(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_LE_Const(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","LE_Const", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","LE_Const", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","LE_Const", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->LE_Const(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_MaxVal(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","MaxVal", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->MaxVal();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_MinVal(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","MinVal", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->MinVal();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_CountTerms(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","CountTerms", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->CountTerms();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_TotalVal(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","TotalVal", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->TotalVal();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_TotalValItems(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","TotalValItems", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->TotalValItems();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_GetZBDD(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  ZBDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","GetZBDD", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->GetZBDD();
  vresult = SWIG_NewPointerObj((new ZBDD(static_cast< const ZBDD& >(result))), SWIGTYPE_p_ZBDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Abs(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Abs", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->Abs();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Sign(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Sign", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->Sign();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::CtoI.-@

  call-seq:
    -@ -> CtoI

Negation operator.
*/
SWIGINTERN VALUE
_wrap_CtoI___neg__(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (arg1)->operator -();
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_TimesSysVar(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","TimesSysVar", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","TimesSysVar", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->TimesSysVar(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_DivBySysVar(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","DivBySysVar", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","DivBySysVar", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->DivBySysVar(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_ShiftDigit(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","ShiftDigit", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ShiftDigit", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->ShiftDigit(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Size(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Size", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (bddword)(arg1)->Size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_GetInt(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","GetInt", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (int)(arg1)->GetInt();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_StrNum10(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","StrNum10", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","StrNum10", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->StrNum10(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_StrNum16(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","StrNum16", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","StrNum16", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->StrNum16(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_PutForm(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","PutForm", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  result = (int)(arg1)->PutForm();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_Print(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  (arg1)->Print();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_XPrint(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","XPrint", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  (arg1)->XPrint();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_XPrint0(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","XPrint0", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  (arg1)->XPrint0();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_ReduceItems(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  CtoI arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","ReduceItems", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "CtoI","ReduceItems", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","ReduceItems", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< CtoI * >(argp2));
    }
  }
  result = (arg1)->ReduceItems(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FreqPatA(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FreqPatA", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","FreqPatA", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->FreqPatA(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FreqPatAV(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FreqPatAV", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","FreqPatAV", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->FreqPatAV(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FreqPatM(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FreqPatM", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","FreqPatM", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->FreqPatM(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FreqPatC(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FreqPatC", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","FreqPatC", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->FreqPatC(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CtoI_FreqPatA2(int argc, VALUE *argv, VALUE self) {
  CtoI *arg1 = (CtoI *) 0 ;
  int arg2 ;
  CtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_CtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI *","FreqPatA2", 1, self )); 
  }
  arg1 = reinterpret_cast< CtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","FreqPatA2", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->FreqPatA2(arg2);
  vresult = SWIG_NewPointerObj((new CtoI(static_cast< const CtoI& >(result))), SWIGTYPE_p_CtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class cBtoI;

SWIGINTERN VALUE
_wrap_new_BtoI__SWIG_0(int argc, VALUE *argv, VALUE self) {
  BtoI *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (BtoI *)new BtoI();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BtoI__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","BtoI", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","BtoI", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (BtoI *)new BtoI((BtoI const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BtoI__SWIG_2(int argc, VALUE *argv, VALUE self) {
  BDD *arg1 = 0 ;
  BtoI *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD const &","BtoI", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD const &","BtoI", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDD * >(argp1);
  result = (BtoI *)new BtoI((BDD const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_BtoI__SWIG_3(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  BtoI *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","BtoI", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (BtoI *)new BtoI(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BtoI_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BtoI_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_BtoI);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BtoI__SWIG_4(int argc, VALUE *argv, VALUE self) {
  BDDV *arg1 = 0 ;
  BtoI *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDDV,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDDV const &","BtoI", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDDV const &","BtoI", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BDDV * >(argp1);
  result = (BtoI *)new BtoI((BDDV const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_BtoI(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_BtoI__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BtoI, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BtoI__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BtoI__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDDV, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BtoI__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BtoI__SWIG_3(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "BtoI.new", 
    "    BtoI.new()\n"
    "    BtoI.new(BtoI const &)\n"
    "    BtoI.new(BDD const &)\n"
    "    BtoI.new(int)\n"
    "    BtoI.new(BDDV const &)\n");
  
  return Qnil;
}


SWIGINTERN void
free_BtoI(BtoI *arg1) {
    delete arg1;
}


/*
  Document-method: RUBDD::BtoI.-@

  call-seq:
    -@ -> BtoI

Negation operator.
*/
SWIGINTERN VALUE
_wrap_BtoI___neg__(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (arg1)->operator -();
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.~

  call-seq:
    ~ -> BtoI

Invert operator.
*/
SWIGINTERN VALUE
_wrap_BtoI___invert__(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","operator ~", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (arg1)->operator ~();
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.<<

  call-seq:
    <<(?) -> BtoI

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_BtoI___lshift__(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator <<", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator <<", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = (arg1)->operator <<((BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.>>

  call-seq:
    >>(?) -> BtoI

Right shifting operator or extracting operator.
*/
SWIGINTERN VALUE
_wrap_BtoI___rshift__(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","operator >>", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator >>", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator >>", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = (arg1)->operator >>((BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_UpperBound__SWIG_0(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","UpperBound", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (arg1)->UpperBound();
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_UpperBound__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BDD arg2 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","UpperBound", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD","UpperBound", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","UpperBound", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BDD * >(argp2));
    }
  }
  result = (arg1)->UpperBound(arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BtoI_UpperBound(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BtoI, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BtoI_UpperBound__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BtoI, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BDD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BtoI_UpperBound__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "BtoI.UpperBound", 
    "    BtoI BtoI.UpperBound()\n"
    "    BtoI BtoI.UpperBound(BDD)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_LowerBound__SWIG_0(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","LowerBound", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (arg1)->LowerBound();
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_LowerBound__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BDD arg2 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","LowerBound", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BDD","LowerBound", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","LowerBound", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BDD * >(argp2));
    }
  }
  result = (arg1)->LowerBound(arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BtoI_LowerBound(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BtoI, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BtoI_LowerBound__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BtoI, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BDD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BtoI_LowerBound__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "BtoI.LowerBound", 
    "    BtoI BtoI.LowerBound()\n"
    "    BtoI BtoI.LowerBound(BDD)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_At0(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  int arg2 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","At0", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","At0", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->At0(arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_At1(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  int arg2 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","At1", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","At1", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->At1(arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_Cofact(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BtoI arg2 ;
  BtoI result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","Cofact", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","Cofact", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","Cofact", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  result = (arg1)->Cofact(arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_Top(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","Top", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (int)(arg1)->Top();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_GetSignBDD(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","GetSignBDD", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (arg1)->GetSignBDD();
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_GetBDD(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  int arg2 ;
  BDD result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","GetBDD", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetBDD", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->GetBDD(arg2);
  vresult = SWIG_NewPointerObj((new BDD(static_cast< const BDD& >(result))), SWIGTYPE_p_BDD, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_GetMetaBDDV(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  BDDV result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","GetMetaBDDV", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (arg1)->GetMetaBDDV();
  vresult = SWIG_NewPointerObj((new BDDV(static_cast< const BDDV& >(result))), SWIGTYPE_p_BDDV, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_Len(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","Len", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (int)(arg1)->Len();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_GetInt(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","GetInt", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (int)(arg1)->GetInt();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_StrNum10(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","StrNum10", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","StrNum10", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->StrNum10(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_StrNum16(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","StrNum16", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","StrNum16", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->StrNum16(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_Size(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  bddword result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","Size", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  result = (bddword)(arg1)->Size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_Print(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = (BtoI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BtoI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  (arg1)->Print();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.btoi_eq

  call-seq:
    btoi_eq(?, ?) -> int

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_btoi_eq(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator ==", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator ==", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator ==", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator ==", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = (int)operator ==((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.btoi_add

  call-seq:
    btoi_add(?, ?) -> BtoI

Add operator.
*/
SWIGINTERN VALUE
_wrap_btoi_add(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator +", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator +", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator +", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator +", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = operator +((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.btoi_sub

  call-seq:
    btoi_sub(?, ?) -> BtoI

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_btoi_sub(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator -", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator -", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator -", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator -", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = operator -((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.btoi_and

  call-seq:
    btoi_and(?, ?) -> BtoI

AND operator.
*/
SWIGINTERN VALUE
_wrap_btoi_and(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator &", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator &", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator &", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator &", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = operator &((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.btoi_bar

  call-seq:
    btoi_bar(?, ?) -> BtoI

OR operator.
*/
SWIGINTERN VALUE
_wrap_btoi_bar(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator |", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator |", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator |", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator |", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = operator |((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BtoI.btoi_hat

  call-seq:
    btoi_hat(?, ?) -> BtoI

XOR operator.
*/
SWIGINTERN VALUE
_wrap_btoi_hat(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator ^", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator ^", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator ^", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator ^", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = operator ^((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_ITE__SWIG_0(int argc, VALUE *argv, VALUE self) {
  BDD arg1 ;
  BtoI arg2 ;
  BtoI arg3 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BDD,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BDD","BtoI_ITE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BDD","BtoI_ITE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BDD * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","BtoI_ITE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_ITE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "BtoI","BtoI_ITE", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_ITE", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< BtoI * >(argp3));
    }
  }
  result = BtoI_ITE(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_btoi_mul(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator *", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator *", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator *", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator *", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = operator *((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_btoi_div(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator /", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator /", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator /", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator /", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = operator /((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_btoi_mod(int argc, VALUE *argv, VALUE self) {
  BtoI *arg1 = 0 ;
  BtoI *arg2 = 0 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI const &","operator %", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator %", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< BtoI * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI const &","operator %", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI const &","operator %", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< BtoI * >(argp2);
  result = operator %((BtoI const &)*arg1,(BtoI const &)*arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_ITE__SWIG_1(int argc, VALUE *argv, VALUE self) {
  BtoI arg1 ;
  BtoI arg2 ;
  BtoI arg3 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI","BtoI_ITE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_ITE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","BtoI_ITE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_ITE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "BtoI","BtoI_ITE", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_ITE", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< BtoI * >(argp3));
    }
  }
  result = BtoI_ITE(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_BtoI_ITE(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BDD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BtoI, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BtoI, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BtoI_ITE__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BtoI, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_BtoI, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_BtoI, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BtoI_ITE__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "BtoI_ITE", 
    "    BtoI BtoI_ITE(BDD, BtoI, BtoI)\n"
    "    BtoI BtoI_ITE(BtoI, BtoI, BtoI)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_EQ(int argc, VALUE *argv, VALUE self) {
  BtoI arg1 ;
  BtoI arg2 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI","BtoI_EQ", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_EQ", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","BtoI_EQ", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_EQ", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  result = BtoI_EQ(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_NE(int argc, VALUE *argv, VALUE self) {
  BtoI arg1 ;
  BtoI arg2 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI","BtoI_NE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_NE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","BtoI_NE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_NE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  result = BtoI_NE(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_GT(int argc, VALUE *argv, VALUE self) {
  BtoI arg1 ;
  BtoI arg2 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI","BtoI_GT", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_GT", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","BtoI_GT", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_GT", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  result = BtoI_GT(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_LT(int argc, VALUE *argv, VALUE self) {
  BtoI arg1 ;
  BtoI arg2 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI","BtoI_LT", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_LT", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","BtoI_LT", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_LT", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  result = BtoI_LT(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_GE(int argc, VALUE *argv, VALUE self) {
  BtoI arg1 ;
  BtoI arg2 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI","BtoI_GE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_GE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","BtoI_GE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_GE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  result = BtoI_GE(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_LE(int argc, VALUE *argv, VALUE self) {
  BtoI arg1 ;
  BtoI arg2 ;
  BtoI result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BtoI","BtoI_LE", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_LE", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< BtoI * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_BtoI,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "BtoI","BtoI_LE", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "BtoI","BtoI_LE", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< BtoI * >(argp2));
    }
  }
  result = BtoI_LE(arg1,arg2);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BtoI_atoi(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  BtoI result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","BtoI_atoi", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = BtoI_atoi(arg1);
  vresult = SWIG_NewPointerObj((new BtoI(static_cast< const BtoI& >(result))), SWIGTYPE_p_BtoI, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_yyparse(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)yyparse();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cVarTable;

SWIGINTERN VALUE
_wrap_new_VarTable__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  VarTable *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","VarTable", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (VarTable *)new VarTable(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_VarTable_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_VarTable_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_VarTable);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_VarTable__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VarTable *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (VarTable *)new VarTable();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_VarTable(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_VarTable__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VarTable__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "VarTable.new", 
    "    VarTable.new(int size)\n"
    "    VarTable.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_VarTable(VarTable *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_VarTable_GetID(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","GetID", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetID", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->GetID(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_GetName(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  int arg2 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","GetName", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetName", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (char *)(arg1)->GetName(arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_GetValue(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","GetValue", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetValue", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetValue(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_GetGID(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","GetGID", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","GetGID", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetGID(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_SetB__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","SetB", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetB", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetB", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetB(arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_SetB__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","SetB", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetB", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetB", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetB", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->SetB(arg2,arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VarTable_SetB(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VarTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VarTable_SetB__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VarTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VarTable_SetB__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "VarTable.SetB", 
    "    void VarTable.SetB(char *, int)\n"
    "    void VarTable.SetB(char *, int, int)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_SetT__SWIG_0(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","SetT", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetT", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetT", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SetT(arg2,arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_SetT0(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","SetT0", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetT0", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char *","SetT0", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->SetT0(arg2,arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_SetT__SWIG_1(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","SetT", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","SetT", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetT", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","SetT", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->SetT(arg2,arg3,arg4);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_VarTable_SetT(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VarTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VarTable_SetT__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VarTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VarTable_SetT__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "VarTable.SetT", 
    "    void VarTable.SetT(char *, int)\n"
    "    void VarTable.SetT(char *, int, int)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_VarTable_Used(int argc, VALUE *argv, VALUE self) {
  VarTable *arg1 = (VarTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_VarTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "VarTable *","Used", 1, self )); 
  }
  arg1 = reinterpret_cast< VarTable * >(argp1);
  result = (int)(arg1)->Used();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cFuncTable;

SWIGINTERN VALUE
_wrap_new_FuncTable__SWIG_0(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  FuncTable *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","FuncTable", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (FuncTable *)new FuncTable(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_FuncTable_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_FuncTable_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_FuncTable);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_FuncTable__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FuncTable *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (FuncTable *)new FuncTable();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_FuncTable(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_FuncTable__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FuncTable__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "FuncTable.new", 
    "    FuncTable.new(int size)\n"
    "    FuncTable.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_FuncTable(FuncTable *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_FuncTable_CheckNew(int argc, VALUE *argv, VALUE self) {
  FuncTable *arg1 = (FuncTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_FuncTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FuncTable *","CheckNew", 1, self )); 
  }
  arg1 = reinterpret_cast< FuncTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","CheckNew", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->CheckNew(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FuncTable_GetCtoI(int argc, VALUE *argv, VALUE self) {
  FuncTable *arg1 = (FuncTable *) 0 ;
  char *arg2 = (char *) 0 ;
  CtoI *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_FuncTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FuncTable *","GetCtoI", 1, self )); 
  }
  arg1 = reinterpret_cast< FuncTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","GetCtoI", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    CtoI &_result_ref = (arg1)->GetCtoI(arg2);
    result = (CtoI *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CtoI, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FuncTable_Set(int argc, VALUE *argv, VALUE self) {
  FuncTable *arg1 = (FuncTable *) 0 ;
  char *arg2 = (char *) 0 ;
  CtoI *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_FuncTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FuncTable *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< FuncTable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CtoI,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "CtoI &","Set", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI &","Set", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< CtoI * >(argp3);
  (arg1)->Set(arg2,*arg3);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FuncTable_Used(int argc, VALUE *argv, VALUE self) {
  FuncTable *arg1 = (FuncTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_FuncTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FuncTable *","Used", 1, self )); 
  }
  arg1 = reinterpret_cast< FuncTable * >(argp1);
  result = (int)(arg1)->Used();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cBOut;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_BOut_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_BOut_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_BOut);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_BOut(int argc, VALUE *argv, VALUE self) {
  BOut *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (BOut *)new BOut();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}



/*
  Document-method: RUBDD::BOut.<<

  call-seq:
    <<(?) -> BOut

Left shifting or appending operator.
*/
SWIGINTERN VALUE
_wrap_BOut___lshift__(int argc, VALUE *argv, VALUE self) {
  BOut *arg1 = (BOut *) 0 ;
  char *arg2 = (char *) 0 ;
  BOut *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BOut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BOut *","operator <<", 1, self )); 
  }
  arg1 = reinterpret_cast< BOut * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char *","operator <<", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    BOut &_result_ref = (arg1)->operator <<(arg2);
    result = (BOut *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BOut, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BOut_Delimit(int argc, VALUE *argv, VALUE self) {
  BOut *arg1 = (BOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BOut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BOut *","Delimit", 1, self )); 
  }
  arg1 = reinterpret_cast< BOut * >(argp1);
  (arg1)->Delimit();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_BOut_Return(int argc, VALUE *argv, VALUE self) {
  BOut *arg1 = (BOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_BOut, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "BOut *","Return", 1, self )); 
  }
  arg1 = reinterpret_cast< BOut * >(argp1);
  (arg1)->Return();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_BOut(BOut *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_VTable_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&VTable), SWIGTYPE_p_VarTable,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_VTable_set(VALUE self, VALUE _val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_VarTable,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""VTable""' of type '""VarTable""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""VTable""' of type '""VarTable""'");
    } else {
      VTable = *(reinterpret_cast< VarTable * >(argp));
    }
  }
  return _val;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FTable_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&FTable), SWIGTYPE_p_FuncTable,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_FTable_set(VALUE self, VALUE _val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_FuncTable,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""FTable""' of type '""FuncTable""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""FTable""' of type '""FuncTable""'");
    } else {
      FTable = *(reinterpret_cast< FuncTable * >(argp));
    }
  }
  return _val;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_bout_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&bout), SWIGTYPE_p_BOut,  0 );
  return _val;
}


SWIGINTERN VALUE
_wrap_bout_set(VALUE self, VALUE _val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_BOut,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""bout""' of type '""BOut""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bout""' of type '""BOut""'");
    } else {
      bout = *(reinterpret_cast< BOut * >(argp));
    }
  }
  return _val;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_yyerror(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char *","yyerror", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  yyerror(arg1);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrintCtoI(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","PrintCtoI", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","PrintCtoI", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  result = (int)PrintCtoI(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrintCtoI_16(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","PrintCtoI_16", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","PrintCtoI_16", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  result = (int)PrintCtoI_16(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrintDigital(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","PrintDigital", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","PrintDigital", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  result = (int)PrintDigital(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrintCase(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","PrintCase", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","PrintCase", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  result = (int)PrintCase(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapAll(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","MapAll", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","MapAll", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  result = (int)MapAll(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MapSel(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","MapSel", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","MapSel", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  result = (int)MapSel(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrintDecomp(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","PrintDecomp", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","PrintDecomp", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  result = (int)PrintDecomp(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_PrintDecompDot(int argc, VALUE *argv, VALUE self) {
  CtoI arg1 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CtoI,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "CtoI","PrintDecompDot", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "CtoI","PrintDecompDot", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< CtoI * >(argp1));
    }
  }
  result = (int)PrintDecompDot(arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_BDD = {"_p_BDD", "BDD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BDDV = {"_p_BDDV", "BDDV *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BDD_Hash = {"_p_BDD_Hash", "BDD_Hash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BOut = {"_p_BOut", "BOut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BtoI = {"_p_BtoI", "BtoI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CtoI = {"_p_CtoI", "CtoI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FuncTable = {"_p_FuncTable", "FuncTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VarTable = {"_p_VarTable", "VarTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZBDD = {"_p_ZBDD", "ZBDD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZBDDV = {"_p_ZBDDV", "ZBDDV *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZBDD_Hash = {"_p_ZBDD_Hash", "ZBDD_Hash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|bddword *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BDD,
  &_swigt__p_BDDV,
  &_swigt__p_BDD_Hash,
  &_swigt__p_BOut,
  &_swigt__p_BtoI,
  &_swigt__p_CtoI,
  &_swigt__p_FILE,
  &_swigt__p_FuncTable,
  &_swigt__p_VarTable,
  &_swigt__p_ZBDD,
  &_swigt__p_ZBDDV,
  &_swigt__p_ZBDD_Hash,
  &_swigt__p_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_BDD[] = {  {&_swigt__p_BDD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BDDV[] = {  {&_swigt__p_BDDV, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BDD_Hash[] = {  {&_swigt__p_BDD_Hash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BOut[] = {  {&_swigt__p_BOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BtoI[] = {  {&_swigt__p_BtoI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CtoI[] = {  {&_swigt__p_CtoI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FuncTable[] = {  {&_swigt__p_FuncTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VarTable[] = {  {&_swigt__p_VarTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZBDD[] = {  {&_swigt__p_ZBDD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZBDDV[] = {  {&_swigt__p_ZBDDV, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZBDD_Hash[] = {  {&_swigt__p_ZBDD_Hash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BDD,
  _swigc__p_BDDV,
  _swigc__p_BDD_Hash,
  _swigc__p_BOut,
  _swigc__p_BtoI,
  _swigc__p_CtoI,
  _swigc__p_FILE,
  _swigc__p_FuncTable,
  _swigc__p_VarTable,
  _swigc__p_ZBDD,
  _swigc__p_ZBDDV,
  _swigc__p_ZBDD_Hash,
  _swigc__p_char,
  _swigc__p_unsigned_int,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_RUBDD(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mRUBDD = rb_define_module("RUBDD");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_singleton_method(mRUBDD, "BDD_MaxNode", VALUEFUNC(_wrap_BDD_MaxNode_get), 0);
  rb_define_singleton_method(mRUBDD, "BDD_MaxVar", VALUEFUNC(_wrap_BDD_MaxVar_get), 0);
  rb_define_module_function(mRUBDD, "BDD_Init", VALUEFUNC(_wrap_BDD_Init), -1);
  rb_define_module_function(mRUBDD, "BDD_NewVar", VALUEFUNC(_wrap_BDD_NewVar), -1);
  rb_define_module_function(mRUBDD, "BDD_NewVarOfLev", VALUEFUNC(_wrap_BDD_NewVarOfLev), -1);
  rb_define_module_function(mRUBDD, "BDD_LevOfVar", VALUEFUNC(_wrap_BDD_LevOfVar), -1);
  rb_define_module_function(mRUBDD, "BDD_VarOfLev", VALUEFUNC(_wrap_BDD_VarOfLev), -1);
  rb_define_module_function(mRUBDD, "BDD_VarUsed", VALUEFUNC(_wrap_BDD_VarUsed), -1);
  rb_define_module_function(mRUBDD, "BDD_TopLev", VALUEFUNC(_wrap_BDD_TopLev), -1);
  rb_define_module_function(mRUBDD, "BDD_Used", VALUEFUNC(_wrap_BDD_Used), -1);
  rb_define_module_function(mRUBDD, "BDD_GC", VALUEFUNC(_wrap_BDD_GC), -1);
  rb_define_module_function(mRUBDD, "BDD_CacheInt", VALUEFUNC(_wrap_BDD_CacheInt), -1);
  rb_define_module_function(mRUBDD, "BDD_CacheBDD", VALUEFUNC(_wrap_BDD_CacheBDD), -1);
  rb_define_module_function(mRUBDD, "BDD_CacheEnt", VALUEFUNC(_wrap_BDD_CacheEnt), -1);
  rb_define_module_function(mRUBDD, "BDD_ID", VALUEFUNC(_wrap_BDD_ID), -1);
  rb_define_module_function(mRUBDD, "BDDvar", VALUEFUNC(_wrap_BDDvar), -1);
  rb_define_module_function(mRUBDD, "bdd_and", VALUEFUNC(_wrap_bdd_and), -1);
  rb_define_module_function(mRUBDD, "bdd_or", VALUEFUNC(_wrap_bdd_or), -1);
  rb_define_module_function(mRUBDD, "bdd_hat", VALUEFUNC(_wrap_bdd_hat), -1);
  rb_define_module_function(mRUBDD, "bdd_eq", VALUEFUNC(_wrap_bdd_eq), -1);
  rb_define_module_function(mRUBDD, "BDD_Imply", VALUEFUNC(_wrap_BDD_Imply), -1);
  rb_define_module_function(mRUBDD, "BDD_Import", VALUEFUNC(_wrap_BDD_Import), -1);
  rb_define_module_function(mRUBDD, "BDD_Random", VALUEFUNC(_wrap_BDD_Random), -1);
  rb_define_module_function(mRUBDD, "BDDerr", VALUEFUNC(_wrap_BDDerr), -1);
  
  cBDD.klass = rb_define_class_under(mRUBDD, "BDD", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_BDD, (void *) &cBDD);
  rb_define_alloc_func(cBDD.klass, _wrap_BDD_allocate);
  rb_define_method(cBDD.klass, "initialize", VALUEFUNC(_wrap_new_BDD), -1);
  rb_define_method(cBDD.klass, "~", VALUEFUNC(_wrap_BDD___invert__), -1);
  rb_define_method(cBDD.klass, "<<", VALUEFUNC(_wrap_BDD___lshift__), -1);
  rb_define_method(cBDD.klass, ">>", VALUEFUNC(_wrap_BDD___rshift__), -1);
  rb_define_method(cBDD.klass, "At0", VALUEFUNC(_wrap_BDD_At0), -1);
  rb_define_method(cBDD.klass, "At1", VALUEFUNC(_wrap_BDD_At1), -1);
  rb_define_method(cBDD.klass, "Cofact", VALUEFUNC(_wrap_BDD_Cofact), -1);
  rb_define_method(cBDD.klass, "Univ", VALUEFUNC(_wrap_BDD_Univ), -1);
  rb_define_method(cBDD.klass, "Exist", VALUEFUNC(_wrap_BDD_Exist), -1);
  rb_define_method(cBDD.klass, "Support", VALUEFUNC(_wrap_BDD_Support), -1);
  rb_define_method(cBDD.klass, "Top", VALUEFUNC(_wrap_BDD_Top), -1);
  rb_define_method(cBDD.klass, "Size", VALUEFUNC(_wrap_BDD_Size), -1);
  rb_define_method(cBDD.klass, "Export", VALUEFUNC(_wrap_BDD_Export), -1);
  rb_define_method(cBDD.klass, "XPrint0", VALUEFUNC(_wrap_BDD_XPrint0), -1);
  rb_define_method(cBDD.klass, "XPrint", VALUEFUNC(_wrap_BDD_XPrint), -1);
  rb_define_method(cBDD.klass, "GetID", VALUEFUNC(_wrap_BDD_GetID), -1);
  rb_define_method(cBDD.klass, "Print", VALUEFUNC(_wrap_BDD_Print), -1);
  rb_define_method(cBDD.klass, "Swap", VALUEFUNC(_wrap_BDD_Swap), -1);
  rb_define_method(cBDD.klass, "Smooth", VALUEFUNC(_wrap_BDD_Smooth), -1);
  cBDD.mark = 0;
  cBDD.destroy = (void (*)(void *)) free_BDD;
  cBDD.trackObjects = 0;
  rb_define_singleton_method(mRUBDD, "BDDV_SysVarTop", VALUEFUNC(_wrap_BDDV_SysVarTop_get), 0);
  rb_define_singleton_method(mRUBDD, "BDDV_MaxLen", VALUEFUNC(_wrap_BDDV_MaxLen_get), 0);
  rb_define_singleton_method(mRUBDD, "BDDV_MaxLenImport", VALUEFUNC(_wrap_BDDV_MaxLenImport_get), 0);
  rb_define_module_function(mRUBDD, "BDDV_Init", VALUEFUNC(_wrap_BDDV_Init), -1);
  rb_define_module_function(mRUBDD, "BDDV_UserTopLev", VALUEFUNC(_wrap_BDDV_UserTopLev), -1);
  rb_define_module_function(mRUBDD, "BDDV_NewVar", VALUEFUNC(_wrap_BDDV_NewVar), -1);
  rb_define_module_function(mRUBDD, "BDDV_NewVarOfLev", VALUEFUNC(_wrap_BDDV_NewVarOfLev), -1);
  rb_define_module_function(mRUBDD, "bddv_and", VALUEFUNC(_wrap_bddv_and), -1);
  rb_define_module_function(mRUBDD, "bddv_or", VALUEFUNC(_wrap_bddv_or), -1);
  rb_define_module_function(mRUBDD, "bddv_hat", VALUEFUNC(_wrap_bddv_hat), -1);
  rb_define_module_function(mRUBDD, "bddv_eq", VALUEFUNC(_wrap_bddv_eq), -1);
  rb_define_module_function(mRUBDD, "BDDV_Imply", VALUEFUNC(_wrap_BDDV_Imply), -1);
  rb_define_module_function(mRUBDD, "BDDV_Mask1", VALUEFUNC(_wrap_BDDV_Mask1), -1);
  rb_define_module_function(mRUBDD, "BDDV_Mask2", VALUEFUNC(_wrap_BDDV_Mask2), -1);
  rb_define_module_function(mRUBDD, "BDDV_Import", VALUEFUNC(_wrap_BDDV_Import), -1);
  
  cBDDV.klass = rb_define_class_under(mRUBDD, "BDDV", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_BDDV, (void *) &cBDDV);
  rb_define_alloc_func(cBDDV.klass, _wrap_BDDV_allocate);
  rb_define_method(cBDDV.klass, "initialize", VALUEFUNC(_wrap_new_BDDV), -1);
  rb_define_method(cBDDV.klass, "~", VALUEFUNC(_wrap_BDDV___invert__), -1);
  rb_define_method(cBDDV.klass, "<<", VALUEFUNC(_wrap_BDDV___lshift__), -1);
  rb_define_method(cBDDV.klass, ">>", VALUEFUNC(_wrap_BDDV___rshift__), -1);
  rb_define_method(cBDDV.klass, "At0", VALUEFUNC(_wrap_BDDV_At0), -1);
  rb_define_method(cBDDV.klass, "At1", VALUEFUNC(_wrap_BDDV_At1), -1);
  rb_define_method(cBDDV.klass, "Cofact", VALUEFUNC(_wrap_BDDV_Cofact), -1);
  rb_define_method(cBDDV.klass, "Swap", VALUEFUNC(_wrap_BDDV_Swap), -1);
  rb_define_method(cBDDV.klass, "Top", VALUEFUNC(_wrap_BDDV_Top), -1);
  rb_define_method(cBDDV.klass, "Size", VALUEFUNC(_wrap_BDDV_Size), -1);
  rb_define_method(cBDDV.klass, "Export", VALUEFUNC(_wrap_BDDV_Export), -1);
  rb_define_method(cBDDV.klass, "XPrint0", VALUEFUNC(_wrap_BDDV_XPrint0), -1);
  rb_define_method(cBDDV.klass, "XPrint", VALUEFUNC(_wrap_BDDV_XPrint), -1);
  rb_define_method(cBDDV.klass, "Former", VALUEFUNC(_wrap_BDDV_Former), -1);
  rb_define_method(cBDDV.klass, "Latter", VALUEFUNC(_wrap_BDDV_Latter), -1);
  rb_define_method(cBDDV.klass, "Part", VALUEFUNC(_wrap_BDDV_Part), -1);
  rb_define_method(cBDDV.klass, "GetBDD", VALUEFUNC(_wrap_BDDV_GetBDD), -1);
  rb_define_method(cBDDV.klass, "GetMetaBDD", VALUEFUNC(_wrap_BDDV_GetMetaBDD), -1);
  rb_define_method(cBDDV.klass, "Uniform", VALUEFUNC(_wrap_BDDV_Uniform), -1);
  rb_define_method(cBDDV.klass, "Len", VALUEFUNC(_wrap_BDDV_Len), -1);
  rb_define_method(cBDDV.klass, "Print", VALUEFUNC(_wrap_BDDV_Print), -1);
  cBDDV.mark = 0;
  cBDDV.destroy = (void (*)(void *)) free_BDDV;
  cBDDV.trackObjects = 0;
  
  cBDD_Hash.klass = rb_define_class_under(mRUBDD, "BDD_Hash", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_BDD_Hash, (void *) &cBDD_Hash);
  rb_define_alloc_func(cBDD_Hash.klass, _wrap_BDD_Hash_allocate);
  rb_define_method(cBDD_Hash.klass, "initialize", VALUEFUNC(_wrap_new_BDD_Hash), -1);
  rb_define_method(cBDD_Hash.klass, "Clear", VALUEFUNC(_wrap_BDD_Hash_Clear), -1);
  rb_define_method(cBDD_Hash.klass, "Enter", VALUEFUNC(_wrap_BDD_Hash_Enter), -1);
  rb_define_method(cBDD_Hash.klass, "Refer", VALUEFUNC(_wrap_BDD_Hash_Refer), -1);
  rb_define_method(cBDD_Hash.klass, "Amount", VALUEFUNC(_wrap_BDD_Hash_Amount), -1);
  cBDD_Hash.mark = 0;
  cBDD_Hash.destroy = (void (*)(void *)) free_BDD_Hash;
  cBDD_Hash.trackObjects = 0;
  rb_define_module_function(mRUBDD, "zbdd_and", VALUEFUNC(_wrap_zbdd_and), -1);
  rb_define_module_function(mRUBDD, "zbdd_add", VALUEFUNC(_wrap_zbdd_add), -1);
  rb_define_module_function(mRUBDD, "zbdd_sub", VALUEFUNC(_wrap_zbdd_sub), -1);
  rb_define_module_function(mRUBDD, "zbdd_mul", VALUEFUNC(_wrap_zbdd_mul), -1);
  rb_define_module_function(mRUBDD, "zbdd_div", VALUEFUNC(_wrap_zbdd_div), -1);
  rb_define_module_function(mRUBDD, "zbdd_mod", VALUEFUNC(_wrap_zbdd_mod), -1);
  rb_define_module_function(mRUBDD, "zbdd_eq", VALUEFUNC(_wrap_zbdd_eq), -1);
  rb_define_module_function(mRUBDD, "ZBDD_Random", VALUEFUNC(_wrap_ZBDD_Random), -1);
  rb_define_module_function(mRUBDD, "ZBDD_Import", VALUEFUNC(_wrap_ZBDD_Import), -1);
  rb_define_module_function(mRUBDD, "BDD_CacheZBDD", VALUEFUNC(_wrap_BDD_CacheZBDD), -1);
  rb_define_module_function(mRUBDD, "ZBDD_ID", VALUEFUNC(_wrap_ZBDD_ID), -1);
  rb_define_module_function(mRUBDD, "ZBDD_LCM_A", VALUEFUNC(_wrap_ZBDD_LCM_A), -1);
  rb_define_module_function(mRUBDD, "ZBDD_LCM_C", VALUEFUNC(_wrap_ZBDD_LCM_C), -1);
  rb_define_module_function(mRUBDD, "ZBDD_LCM_M", VALUEFUNC(_wrap_ZBDD_LCM_M), -1);
  
  cZBDD.klass = rb_define_class_under(mRUBDD, "ZBDD", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_ZBDD, (void *) &cZBDD);
  rb_define_alloc_func(cZBDD.klass, _wrap_ZBDD_allocate);
  rb_define_method(cZBDD.klass, "initialize", VALUEFUNC(_wrap_new_ZBDD), -1);
  rb_define_method(cZBDD.klass, "<<", VALUEFUNC(_wrap_ZBDD___lshift__), -1);
  rb_define_method(cZBDD.klass, ">>", VALUEFUNC(_wrap_ZBDD___rshift__), -1);
  rb_define_method(cZBDD.klass, "OffSet", VALUEFUNC(_wrap_ZBDD_OffSet), -1);
  rb_define_method(cZBDD.klass, "OnSet", VALUEFUNC(_wrap_ZBDD_OnSet), -1);
  rb_define_method(cZBDD.klass, "OnSet0", VALUEFUNC(_wrap_ZBDD_OnSet0), -1);
  rb_define_method(cZBDD.klass, "Change", VALUEFUNC(_wrap_ZBDD_Change), -1);
  rb_define_method(cZBDD.klass, "Swap", VALUEFUNC(_wrap_ZBDD_Swap), -1);
  rb_define_method(cZBDD.klass, "Restrict", VALUEFUNC(_wrap_ZBDD_Restrict), -1);
  rb_define_method(cZBDD.klass, "Permit", VALUEFUNC(_wrap_ZBDD_Permit), -1);
  rb_define_method(cZBDD.klass, "PermitSym", VALUEFUNC(_wrap_ZBDD_PermitSym), -1);
  rb_define_method(cZBDD.klass, "Support", VALUEFUNC(_wrap_ZBDD_Support), -1);
  rb_define_method(cZBDD.klass, "Always", VALUEFUNC(_wrap_ZBDD_Always), -1);
  rb_define_method(cZBDD.klass, "SymChk", VALUEFUNC(_wrap_ZBDD_SymChk), -1);
  rb_define_method(cZBDD.klass, "SymGrp", VALUEFUNC(_wrap_ZBDD_SymGrp), -1);
  rb_define_method(cZBDD.klass, "SymGrpNaive", VALUEFUNC(_wrap_ZBDD_SymGrpNaive), -1);
  rb_define_method(cZBDD.klass, "ImplyChk", VALUEFUNC(_wrap_ZBDD_ImplyChk), -1);
  rb_define_method(cZBDD.klass, "CoImplyChk", VALUEFUNC(_wrap_ZBDD_CoImplyChk), -1);
  rb_define_method(cZBDD.klass, "SymSet", VALUEFUNC(_wrap_ZBDD_SymSet), -1);
  rb_define_method(cZBDD.klass, "ImplySet", VALUEFUNC(_wrap_ZBDD_ImplySet), -1);
  rb_define_method(cZBDD.klass, "CoImplySet", VALUEFUNC(_wrap_ZBDD_CoImplySet), -1);
  rb_define_method(cZBDD.klass, "IsPoly", VALUEFUNC(_wrap_ZBDD_IsPoly), -1);
  rb_define_method(cZBDD.klass, "Divisor", VALUEFUNC(_wrap_ZBDD_Divisor), -1);
  rb_define_method(cZBDD.klass, "Top", VALUEFUNC(_wrap_ZBDD_Top), -1);
  rb_define_method(cZBDD.klass, "GetID", VALUEFUNC(_wrap_ZBDD_GetID), -1);
  rb_define_method(cZBDD.klass, "Size", VALUEFUNC(_wrap_ZBDD_Size), -1);
  rb_define_method(cZBDD.klass, "Card", VALUEFUNC(_wrap_ZBDD_Card), -1);
  rb_define_method(cZBDD.klass, "Lit", VALUEFUNC(_wrap_ZBDD_Lit), -1);
  rb_define_method(cZBDD.klass, "Export", VALUEFUNC(_wrap_ZBDD_Export), -1);
  rb_define_method(cZBDD.klass, "PrintPla", VALUEFUNC(_wrap_ZBDD_PrintPla), -1);
  rb_define_method(cZBDD.klass, "XPrint", VALUEFUNC(_wrap_ZBDD_XPrint), -1);
  rb_define_method(cZBDD.klass, "Print", VALUEFUNC(_wrap_ZBDD_Print), -1);
  cZBDD.mark = 0;
  cZBDD.destroy = (void (*)(void *)) free_ZBDD;
  cZBDD.trackObjects = 0;
  rb_define_module_function(mRUBDD, "zbddv_and", VALUEFUNC(_wrap_zbddv_and), -1);
  rb_define_module_function(mRUBDD, "zbddv_add", VALUEFUNC(_wrap_zbddv_add), -1);
  rb_define_module_function(mRUBDD, "zbddv_sub", VALUEFUNC(_wrap_zbddv_sub), -1);
  rb_define_module_function(mRUBDD, "zbddv_eq", VALUEFUNC(_wrap_zbddv_eq), -1);
  rb_define_module_function(mRUBDD, "ZBDDV_Import", VALUEFUNC(_wrap_ZBDDV_Import), -1);
  
  cZBDDV.klass = rb_define_class_under(mRUBDD, "ZBDDV", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_ZBDDV, (void *) &cZBDDV);
  rb_define_alloc_func(cZBDDV.klass, _wrap_ZBDDV_allocate);
  rb_define_method(cZBDDV.klass, "initialize", VALUEFUNC(_wrap_new_ZBDDV), -1);
  rb_define_method(cZBDDV.klass, "<<", VALUEFUNC(_wrap_ZBDDV___lshift__), -1);
  rb_define_method(cZBDDV.klass, ">>", VALUEFUNC(_wrap_ZBDDV___rshift__), -1);
  rb_define_method(cZBDDV.klass, "OffSet", VALUEFUNC(_wrap_ZBDDV_OffSet), -1);
  rb_define_method(cZBDDV.klass, "OnSet", VALUEFUNC(_wrap_ZBDDV_OnSet), -1);
  rb_define_method(cZBDDV.klass, "OnSet0", VALUEFUNC(_wrap_ZBDDV_OnSet0), -1);
  rb_define_method(cZBDDV.klass, "Change", VALUEFUNC(_wrap_ZBDDV_Change), -1);
  rb_define_method(cZBDDV.klass, "Swap", VALUEFUNC(_wrap_ZBDDV_Swap), -1);
  rb_define_method(cZBDDV.klass, "Top", VALUEFUNC(_wrap_ZBDDV_Top), -1);
  rb_define_method(cZBDDV.klass, "Mask", VALUEFUNC(_wrap_ZBDDV_Mask), -1);
  rb_define_method(cZBDDV.klass, "GetZBDD", VALUEFUNC(_wrap_ZBDDV_GetZBDD), -1);
  rb_define_method(cZBDDV.klass, "GetMetaZBDD", VALUEFUNC(_wrap_ZBDDV_GetMetaZBDD), -1);
  rb_define_method(cZBDDV.klass, "Last", VALUEFUNC(_wrap_ZBDDV_Last), -1);
  rb_define_method(cZBDDV.klass, "Size", VALUEFUNC(_wrap_ZBDDV_Size), -1);
  rb_define_method(cZBDDV.klass, "Print", VALUEFUNC(_wrap_ZBDDV_Print), -1);
  rb_define_method(cZBDDV.klass, "Export", VALUEFUNC(_wrap_ZBDDV_Export), -1);
  rb_define_method(cZBDDV.klass, "PrintPla", VALUEFUNC(_wrap_ZBDDV_PrintPla), -1);
  rb_define_method(cZBDDV.klass, "XPrint", VALUEFUNC(_wrap_ZBDDV_XPrint), -1);
  cZBDDV.mark = 0;
  cZBDDV.destroy = (void (*)(void *)) free_ZBDDV;
  cZBDDV.trackObjects = 0;
  
  cZBDD_Hash.klass = rb_define_class_under(mRUBDD, "ZBDD_Hash", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_ZBDD_Hash, (void *) &cZBDD_Hash);
  rb_define_alloc_func(cZBDD_Hash.klass, _wrap_ZBDD_Hash_allocate);
  rb_define_method(cZBDD_Hash.klass, "initialize", VALUEFUNC(_wrap_new_ZBDD_Hash), -1);
  rb_define_method(cZBDD_Hash.klass, "Clear", VALUEFUNC(_wrap_ZBDD_Hash_Clear), -1);
  rb_define_method(cZBDD_Hash.klass, "Enter", VALUEFUNC(_wrap_ZBDD_Hash_Enter), -1);
  rb_define_method(cZBDD_Hash.klass, "Refer", VALUEFUNC(_wrap_ZBDD_Hash_Refer), -1);
  rb_define_method(cZBDD_Hash.klass, "Amount", VALUEFUNC(_wrap_ZBDD_Hash_Amount), -1);
  cZBDD_Hash.mark = 0;
  cZBDD_Hash.destroy = (void (*)(void *)) free_ZBDD_Hash;
  cZBDD_Hash.trackObjects = 0;
  rb_define_module_function(mRUBDD, "ctoi_eq", VALUEFUNC(_wrap_ctoi_eq), -1);
  rb_define_module_function(mRUBDD, "ctoi_add", VALUEFUNC(_wrap_ctoi_add), -1);
  rb_define_module_function(mRUBDD, "ctoi_sub", VALUEFUNC(_wrap_ctoi_sub), -1);
  rb_define_module_function(mRUBDD, "ctoi_mul", VALUEFUNC(_wrap_ctoi_mul), -1);
  rb_define_module_function(mRUBDD, "ctoi_div", VALUEFUNC(_wrap_ctoi_div), -1);
  rb_define_module_function(mRUBDD, "ctoi_mod", VALUEFUNC(_wrap_ctoi_mod), -1);
  rb_define_module_function(mRUBDD, "CtoI_Null", VALUEFUNC(_wrap_CtoI_Null), -1);
  rb_define_module_function(mRUBDD, "CtoI_ITE", VALUEFUNC(_wrap_CtoI_ITE), -1);
  rb_define_module_function(mRUBDD, "CtoI_EQ", VALUEFUNC(_wrap_CtoI_EQ), -1);
  rb_define_module_function(mRUBDD, "CtoI_NE", VALUEFUNC(_wrap_CtoI_NE), -1);
  rb_define_module_function(mRUBDD, "CtoI_GT", VALUEFUNC(_wrap_CtoI_GT), -1);
  rb_define_module_function(mRUBDD, "CtoI_GE", VALUEFUNC(_wrap_CtoI_GE), -1);
  rb_define_module_function(mRUBDD, "CtoI_LT", VALUEFUNC(_wrap_CtoI_LT), -1);
  rb_define_module_function(mRUBDD, "CtoI_LE", VALUEFUNC(_wrap_CtoI_LE), -1);
  rb_define_module_function(mRUBDD, "CtoI_Max", VALUEFUNC(_wrap_CtoI_Max), -1);
  rb_define_module_function(mRUBDD, "CtoI_Min", VALUEFUNC(_wrap_CtoI_Min), -1);
  rb_define_module_function(mRUBDD, "CtoI_atoi", VALUEFUNC(_wrap_CtoI_atoi), -1);
  rb_define_module_function(mRUBDD, "CtoI_Intsec", VALUEFUNC(_wrap_CtoI_Intsec), -1);
  rb_define_module_function(mRUBDD, "CtoI_Union", VALUEFUNC(_wrap_CtoI_Union), -1);
  rb_define_module_function(mRUBDD, "CtoI_Diff", VALUEFUNC(_wrap_CtoI_Diff), -1);
  
  cCtoI.klass = rb_define_class_under(mRUBDD, "CtoI", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_CtoI, (void *) &cCtoI);
  rb_define_alloc_func(cCtoI.klass, _wrap_CtoI_allocate);
  rb_define_method(cCtoI.klass, "initialize", VALUEFUNC(_wrap_new_CtoI), -1);
  rb_define_method(cCtoI.klass, "Top", VALUEFUNC(_wrap_CtoI_Top), -1);
  rb_define_method(cCtoI.klass, "TopItem", VALUEFUNC(_wrap_CtoI_TopItem), -1);
  rb_define_method(cCtoI.klass, "TopDigit", VALUEFUNC(_wrap_CtoI_TopDigit), -1);
  rb_define_method(cCtoI.klass, "IsBool", VALUEFUNC(_wrap_CtoI_IsBool), -1);
  rb_define_method(cCtoI.klass, "IsConst", VALUEFUNC(_wrap_CtoI_IsConst), -1);
  rb_define_method(cCtoI.klass, "AffixVar", VALUEFUNC(_wrap_CtoI_AffixVar), -1);
  rb_define_method(cCtoI.klass, "Factor0", VALUEFUNC(_wrap_CtoI_Factor0), -1);
  rb_define_method(cCtoI.klass, "Factor1", VALUEFUNC(_wrap_CtoI_Factor1), -1);
  rb_define_method(cCtoI.klass, "FilterThen", VALUEFUNC(_wrap_CtoI_FilterThen), -1);
  rb_define_method(cCtoI.klass, "FilterElse", VALUEFUNC(_wrap_CtoI_FilterElse), -1);
  rb_define_method(cCtoI.klass, "FilterRestrict", VALUEFUNC(_wrap_CtoI_FilterRestrict), -1);
  rb_define_method(cCtoI.klass, "FilterPermit", VALUEFUNC(_wrap_CtoI_FilterPermit), -1);
  rb_define_method(cCtoI.klass, "FilterPermitSym", VALUEFUNC(_wrap_CtoI_FilterPermitSym), -1);
  rb_define_method(cCtoI.klass, "Support", VALUEFUNC(_wrap_CtoI_Support), -1);
  rb_define_method(cCtoI.klass, "NonZero", VALUEFUNC(_wrap_CtoI_NonZero), -1);
  rb_define_method(cCtoI.klass, "Digit", VALUEFUNC(_wrap_CtoI_Digit), -1);
  rb_define_method(cCtoI.klass, "EQ_Const", VALUEFUNC(_wrap_CtoI_EQ_Const), -1);
  rb_define_method(cCtoI.klass, "NE_Const", VALUEFUNC(_wrap_CtoI_NE_Const), -1);
  rb_define_method(cCtoI.klass, "GT_Const", VALUEFUNC(_wrap_CtoI_GT_Const), -1);
  rb_define_method(cCtoI.klass, "GE_Const", VALUEFUNC(_wrap_CtoI_GE_Const), -1);
  rb_define_method(cCtoI.klass, "LT_Const", VALUEFUNC(_wrap_CtoI_LT_Const), -1);
  rb_define_method(cCtoI.klass, "LE_Const", VALUEFUNC(_wrap_CtoI_LE_Const), -1);
  rb_define_method(cCtoI.klass, "MaxVal", VALUEFUNC(_wrap_CtoI_MaxVal), -1);
  rb_define_method(cCtoI.klass, "MinVal", VALUEFUNC(_wrap_CtoI_MinVal), -1);
  rb_define_method(cCtoI.klass, "CountTerms", VALUEFUNC(_wrap_CtoI_CountTerms), -1);
  rb_define_method(cCtoI.klass, "TotalVal", VALUEFUNC(_wrap_CtoI_TotalVal), -1);
  rb_define_method(cCtoI.klass, "TotalValItems", VALUEFUNC(_wrap_CtoI_TotalValItems), -1);
  rb_define_method(cCtoI.klass, "GetZBDD", VALUEFUNC(_wrap_CtoI_GetZBDD), -1);
  rb_define_method(cCtoI.klass, "Abs", VALUEFUNC(_wrap_CtoI_Abs), -1);
  rb_define_method(cCtoI.klass, "Sign", VALUEFUNC(_wrap_CtoI_Sign), -1);
  rb_define_method(cCtoI.klass, "-@", VALUEFUNC(_wrap_CtoI___neg__), -1);
  rb_define_method(cCtoI.klass, "TimesSysVar", VALUEFUNC(_wrap_CtoI_TimesSysVar), -1);
  rb_define_method(cCtoI.klass, "DivBySysVar", VALUEFUNC(_wrap_CtoI_DivBySysVar), -1);
  rb_define_method(cCtoI.klass, "ShiftDigit", VALUEFUNC(_wrap_CtoI_ShiftDigit), -1);
  rb_define_method(cCtoI.klass, "Size", VALUEFUNC(_wrap_CtoI_Size), -1);
  rb_define_method(cCtoI.klass, "GetInt", VALUEFUNC(_wrap_CtoI_GetInt), -1);
  rb_define_method(cCtoI.klass, "StrNum10", VALUEFUNC(_wrap_CtoI_StrNum10), -1);
  rb_define_method(cCtoI.klass, "StrNum16", VALUEFUNC(_wrap_CtoI_StrNum16), -1);
  rb_define_method(cCtoI.klass, "PutForm", VALUEFUNC(_wrap_CtoI_PutForm), -1);
  rb_define_method(cCtoI.klass, "Print", VALUEFUNC(_wrap_CtoI_Print), -1);
  rb_define_method(cCtoI.klass, "XPrint", VALUEFUNC(_wrap_CtoI_XPrint), -1);
  rb_define_method(cCtoI.klass, "XPrint0", VALUEFUNC(_wrap_CtoI_XPrint0), -1);
  rb_define_method(cCtoI.klass, "ReduceItems", VALUEFUNC(_wrap_CtoI_ReduceItems), -1);
  rb_define_method(cCtoI.klass, "FreqPatA", VALUEFUNC(_wrap_CtoI_FreqPatA), -1);
  rb_define_method(cCtoI.klass, "FreqPatAV", VALUEFUNC(_wrap_CtoI_FreqPatAV), -1);
  rb_define_method(cCtoI.klass, "FreqPatM", VALUEFUNC(_wrap_CtoI_FreqPatM), -1);
  rb_define_method(cCtoI.klass, "FreqPatC", VALUEFUNC(_wrap_CtoI_FreqPatC), -1);
  rb_define_method(cCtoI.klass, "FreqPatA2", VALUEFUNC(_wrap_CtoI_FreqPatA2), -1);
  cCtoI.mark = 0;
  cCtoI.destroy = (void (*)(void *)) free_CtoI;
  cCtoI.trackObjects = 0;
  rb_define_module_function(mRUBDD, "btoi_eq", VALUEFUNC(_wrap_btoi_eq), -1);
  rb_define_module_function(mRUBDD, "btoi_add", VALUEFUNC(_wrap_btoi_add), -1);
  rb_define_module_function(mRUBDD, "btoi_sub", VALUEFUNC(_wrap_btoi_sub), -1);
  rb_define_module_function(mRUBDD, "btoi_and", VALUEFUNC(_wrap_btoi_and), -1);
  rb_define_module_function(mRUBDD, "btoi_bar", VALUEFUNC(_wrap_btoi_bar), -1);
  rb_define_module_function(mRUBDD, "btoi_hat", VALUEFUNC(_wrap_btoi_hat), -1);
  
  cBtoI.klass = rb_define_class_under(mRUBDD, "BtoI", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_BtoI, (void *) &cBtoI);
  rb_define_alloc_func(cBtoI.klass, _wrap_BtoI_allocate);
  rb_define_method(cBtoI.klass, "initialize", VALUEFUNC(_wrap_new_BtoI), -1);
  rb_define_method(cBtoI.klass, "-@", VALUEFUNC(_wrap_BtoI___neg__), -1);
  rb_define_method(cBtoI.klass, "~", VALUEFUNC(_wrap_BtoI___invert__), -1);
  rb_define_method(cBtoI.klass, "<<", VALUEFUNC(_wrap_BtoI___lshift__), -1);
  rb_define_method(cBtoI.klass, ">>", VALUEFUNC(_wrap_BtoI___rshift__), -1);
  rb_define_method(cBtoI.klass, "UpperBound", VALUEFUNC(_wrap_BtoI_UpperBound), -1);
  rb_define_method(cBtoI.klass, "LowerBound", VALUEFUNC(_wrap_BtoI_LowerBound), -1);
  rb_define_method(cBtoI.klass, "At0", VALUEFUNC(_wrap_BtoI_At0), -1);
  rb_define_method(cBtoI.klass, "At1", VALUEFUNC(_wrap_BtoI_At1), -1);
  rb_define_method(cBtoI.klass, "Cofact", VALUEFUNC(_wrap_BtoI_Cofact), -1);
  rb_define_method(cBtoI.klass, "Top", VALUEFUNC(_wrap_BtoI_Top), -1);
  rb_define_method(cBtoI.klass, "GetSignBDD", VALUEFUNC(_wrap_BtoI_GetSignBDD), -1);
  rb_define_method(cBtoI.klass, "GetBDD", VALUEFUNC(_wrap_BtoI_GetBDD), -1);
  rb_define_method(cBtoI.klass, "GetMetaBDDV", VALUEFUNC(_wrap_BtoI_GetMetaBDDV), -1);
  rb_define_method(cBtoI.klass, "Len", VALUEFUNC(_wrap_BtoI_Len), -1);
  rb_define_method(cBtoI.klass, "GetInt", VALUEFUNC(_wrap_BtoI_GetInt), -1);
  rb_define_method(cBtoI.klass, "StrNum10", VALUEFUNC(_wrap_BtoI_StrNum10), -1);
  rb_define_method(cBtoI.klass, "StrNum16", VALUEFUNC(_wrap_BtoI_StrNum16), -1);
  rb_define_method(cBtoI.klass, "Size", VALUEFUNC(_wrap_BtoI_Size), -1);
  rb_define_method(cBtoI.klass, "Print", VALUEFUNC(_wrap_BtoI_Print), -1);
  cBtoI.mark = 0;
  cBtoI.destroy = (void (*)(void *)) free_BtoI;
  cBtoI.trackObjects = 0;
  rb_define_module_function(mRUBDD, "btoi_mul", VALUEFUNC(_wrap_btoi_mul), -1);
  rb_define_module_function(mRUBDD, "btoi_div", VALUEFUNC(_wrap_btoi_div), -1);
  rb_define_module_function(mRUBDD, "btoi_mod", VALUEFUNC(_wrap_btoi_mod), -1);
  rb_define_module_function(mRUBDD, "BtoI_ITE", VALUEFUNC(_wrap_BtoI_ITE), -1);
  rb_define_module_function(mRUBDD, "BtoI_EQ", VALUEFUNC(_wrap_BtoI_EQ), -1);
  rb_define_module_function(mRUBDD, "BtoI_NE", VALUEFUNC(_wrap_BtoI_NE), -1);
  rb_define_module_function(mRUBDD, "BtoI_GT", VALUEFUNC(_wrap_BtoI_GT), -1);
  rb_define_module_function(mRUBDD, "BtoI_LT", VALUEFUNC(_wrap_BtoI_LT), -1);
  rb_define_module_function(mRUBDD, "BtoI_GE", VALUEFUNC(_wrap_BtoI_GE), -1);
  rb_define_module_function(mRUBDD, "BtoI_LE", VALUEFUNC(_wrap_BtoI_LE), -1);
  rb_define_module_function(mRUBDD, "BtoI_atoi", VALUEFUNC(_wrap_BtoI_atoi), -1);
  rb_define_const(mRUBDD, "PROMPT", SWIG_FromCharPtr("vsop> "));
  rb_define_const(mRUBDD, "DOCUMENT", SWIG_FromCharPtr("vsop.help"));
  rb_define_module_function(mRUBDD, "yyparse", VALUEFUNC(_wrap_yyparse), -1);
  
  cVarTable.klass = rb_define_class_under(mRUBDD, "VarTable", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_VarTable, (void *) &cVarTable);
  rb_define_alloc_func(cVarTable.klass, _wrap_VarTable_allocate);
  rb_define_method(cVarTable.klass, "initialize", VALUEFUNC(_wrap_new_VarTable), -1);
  rb_define_method(cVarTable.klass, "GetID", VALUEFUNC(_wrap_VarTable_GetID), -1);
  rb_define_method(cVarTable.klass, "GetName", VALUEFUNC(_wrap_VarTable_GetName), -1);
  rb_define_method(cVarTable.klass, "GetValue", VALUEFUNC(_wrap_VarTable_GetValue), -1);
  rb_define_method(cVarTable.klass, "GetGID", VALUEFUNC(_wrap_VarTable_GetGID), -1);
  rb_define_method(cVarTable.klass, "SetB", VALUEFUNC(_wrap_VarTable_SetB), -1);
  rb_define_method(cVarTable.klass, "SetT0", VALUEFUNC(_wrap_VarTable_SetT0), -1);
  rb_define_method(cVarTable.klass, "SetT", VALUEFUNC(_wrap_VarTable_SetT), -1);
  rb_define_method(cVarTable.klass, "Used", VALUEFUNC(_wrap_VarTable_Used), -1);
  cVarTable.mark = 0;
  cVarTable.destroy = (void (*)(void *)) free_VarTable;
  cVarTable.trackObjects = 0;
  
  cFuncTable.klass = rb_define_class_under(mRUBDD, "FuncTable", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_FuncTable, (void *) &cFuncTable);
  rb_define_alloc_func(cFuncTable.klass, _wrap_FuncTable_allocate);
  rb_define_method(cFuncTable.klass, "initialize", VALUEFUNC(_wrap_new_FuncTable), -1);
  rb_define_method(cFuncTable.klass, "CheckNew", VALUEFUNC(_wrap_FuncTable_CheckNew), -1);
  rb_define_method(cFuncTable.klass, "GetCtoI", VALUEFUNC(_wrap_FuncTable_GetCtoI), -1);
  rb_define_method(cFuncTable.klass, "Set", VALUEFUNC(_wrap_FuncTable_Set), -1);
  rb_define_method(cFuncTable.klass, "Used", VALUEFUNC(_wrap_FuncTable_Used), -1);
  cFuncTable.mark = 0;
  cFuncTable.destroy = (void (*)(void *)) free_FuncTable;
  cFuncTable.trackObjects = 0;
  
  cBOut.klass = rb_define_class_under(mRUBDD, "BOut", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_BOut, (void *) &cBOut);
  rb_define_alloc_func(cBOut.klass, _wrap_BOut_allocate);
  rb_define_method(cBOut.klass, "initialize", VALUEFUNC(_wrap_new_BOut), -1);
  rb_define_method(cBOut.klass, "<<", VALUEFUNC(_wrap_BOut___lshift__), -1);
  rb_define_method(cBOut.klass, "Delimit", VALUEFUNC(_wrap_BOut_Delimit), -1);
  rb_define_method(cBOut.klass, "Return", VALUEFUNC(_wrap_BOut_Return), -1);
  cBOut.mark = 0;
  cBOut.destroy = (void (*)(void *)) free_BOut;
  cBOut.trackObjects = 0;
  rb_define_singleton_method(mRUBDD, "VTable", VALUEFUNC(_wrap_VTable_get), 0);
  rb_define_singleton_method(mRUBDD, "VTable=", VALUEFUNC(_wrap_VTable_set), 1);
  rb_define_singleton_method(mRUBDD, "FTable", VALUEFUNC(_wrap_FTable_get), 0);
  rb_define_singleton_method(mRUBDD, "FTable=", VALUEFUNC(_wrap_FTable_set), 1);
  rb_define_singleton_method(mRUBDD, "bout", VALUEFUNC(_wrap_bout_get), 0);
  rb_define_singleton_method(mRUBDD, "bout=", VALUEFUNC(_wrap_bout_set), 1);
  rb_define_module_function(mRUBDD, "yyerror", VALUEFUNC(_wrap_yyerror), -1);
  rb_define_module_function(mRUBDD, "PrintCtoI", VALUEFUNC(_wrap_PrintCtoI), -1);
  rb_define_module_function(mRUBDD, "PrintCtoI_16", VALUEFUNC(_wrap_PrintCtoI_16), -1);
  rb_define_module_function(mRUBDD, "PrintDigital", VALUEFUNC(_wrap_PrintDigital), -1);
  rb_define_module_function(mRUBDD, "PrintCase", VALUEFUNC(_wrap_PrintCase), -1);
  rb_define_module_function(mRUBDD, "MapAll", VALUEFUNC(_wrap_MapAll), -1);
  rb_define_module_function(mRUBDD, "MapSel", VALUEFUNC(_wrap_MapSel), -1);
  rb_define_module_function(mRUBDD, "PrintDecomp", VALUEFUNC(_wrap_PrintDecomp), -1);
  rb_define_module_function(mRUBDD, "PrintDecompDot", VALUEFUNC(_wrap_PrintDecompDot), -1);
}

